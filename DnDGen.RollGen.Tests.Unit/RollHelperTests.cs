using NUnit.Framework;
using System;
using System.Diagnostics;

namespace DnDGen.RollGen.Tests.Unit
{
    [TestFixture]
    public class RollHelperTests
    {
        private Stopwatch stopwatch;

        [SetUp]
        public void Setup()
        {
            stopwatch = new Stopwatch();
        }

        [TestCase(-2, -2, "-2")]
        [TestCase(-2, -1, "1d2-3")]
        [TestCase(-2, 0, "1d3-3")]
        [TestCase(-2, 2, "2d3-4")]
        [TestCase(-2, 3, "1d6-3")]
        [TestCase(-1, -1, "-1")]
        [TestCase(-1, 0, "1d2-2")]
        [TestCase(-1, 1, "1d3-2")]
        [TestCase(-1, 3, "2d3-3")]
        [TestCase(-1, 4, "1d6-2")]
        [TestCase(0, 0, "0")]
        [TestCase(0, 1, "1d2-1")]
        [TestCase(0, 2, "1d3-1")]
        [TestCase(0, 4, "2d3-2")]
        [TestCase(0, 5, "1d6-1")]
        [TestCase(1, 1, "1")]
        [TestCase(1, 2, "1d2")]
        [TestCase(1, 3, "1d3")]
        [TestCase(1, 4, "1d4")]
        [TestCase(1, 5, "2d3-1")]
        [TestCase(1, 6, "1d6")]
        [TestCase(1, 7, "2d4-1")]
        [TestCase(1, 8, "1d8")]
        [TestCase(1, 9, "4d3-3")]
        [TestCase(1, 10, "1d10")]
        [TestCase(1, 11, "2d6-1")]
        [TestCase(1, 12, "1d12")]
        [TestCase(1, 20, "1d20")]
        [TestCase(1, 36, "5d8-4")]
        [TestCase(1, 48, "47d2-46")]
        [TestCase(1, 52, "17d4-16")]
        [TestCase(1, 100, "1d100")]
        [TestCase(1, 103, "34d4-33")]
        [TestCase(2, 2, "2")]
        [TestCase(2, 3, "1d2+1")]
        [TestCase(2, 4, "1d3+1")]
        [TestCase(2, 5, "1d4+1")]
        [TestCase(2, 6, "2d3")]
        [TestCase(2, 7, "1d6+1")]
        [TestCase(2, 8, "2d4")]
        [TestCase(2, 10, "4d3-2")]
        [TestCase(2, 12, "2d6")]
        [TestCase(2, 13, "1d12+1")]
        [TestCase(2, 15, "13d2-11")]
        [TestCase(2, 20, "2d10")]
        [TestCase(2, 24, "2d12")]
        [TestCase(2, 40, "2d20")]
        [TestCase(2, 200, "2d100")]
        [TestCase(3, 3, "3")]
        [TestCase(3, 4, "1d2+2")]
        [TestCase(3, 5, "1d3+2")]
        [TestCase(3, 6, "1d4+2")]
        [TestCase(3, 8, "1d6+2")]
        [TestCase(3, 9, "2d4+1")]
        [TestCase(3, 10, "1d8+2")]
        [TestCase(3, 12, "1d10+2")]
        [TestCase(3, 13, "2d6+1")]
        [TestCase(3, 18, "3d6")]
        [TestCase(3, 20, "17d2-14")]
        [TestCase(3, 24, "3d8")]
        [TestCase(3, 28, "5d6-2")]
        [TestCase(3, 30, "3d10")]
        [TestCase(3, 36, "3d12")]
        [TestCase(4, 4, "4")]
        [TestCase(4, 5, "1d2+3")]
        [TestCase(4, 6, "1d3+3")]
        [TestCase(4, 7, "1d4+3")]
        [TestCase(4, 8, "2d3+2")]
        [TestCase(4, 9, "1d6+3")]
        [TestCase(4, 10, "2d4+2")]
        [TestCase(4, 12, "4d3")]
        [TestCase(4, 16, "4d4")]
        [TestCase(4, 24, "4d6")]
        [TestCase(4, 32, "4d8")]
        [TestCase(4, 40, "4d10")]
        [TestCase(4, 48, "4d12")]
        [TestCase(5, 5, "5")]
        [TestCase(5, 8, "1d4+4")]
        [TestCase(5, 9, "2d3+3")]
        [TestCase(5, 10, "1d6+4")]
        [TestCase(5, 12, "1d8+4")]
        [TestCase(5, 13, "4d3+1")]
        [TestCase(5, 14, "1d10+4")]
        [TestCase(5, 16, "1d12+4")]
        [TestCase(5, 18, "13d2-8")]
        [TestCase(5, 20, "3d6+2")]
        [TestCase(5, 30, "5d6")]
        [TestCase(5, 40, "5d8")]
        [TestCase(5, 50, "5d10")]
        [TestCase(5, 60, "5d12")]
        [TestCase(6, 6, "6")]
        [TestCase(6, 7, "1d2+5")]
        [TestCase(6, 8, "1d3+5")]
        [TestCase(6, 9, "1d4+5")]
        [TestCase(6, 10, "2d3+4")]
        [TestCase(6, 11, "1d6+5")]
        [TestCase(6, 13, "1d8+5")]
        [TestCase(6, 15, "1d10+5")]
        [TestCase(6, 18, "4d4+2")]
        [TestCase(6, 20, "2d8+4")]
        [TestCase(6, 24, "2d10+4")]
        [TestCase(6, 30, "8d4-2")]
        [TestCase(6, 36, "6d6")]
        [TestCase(6, 45, "13d4-7")]
        [TestCase(7, 7, "7")]
        [TestCase(7, 10, "1d4+6")]
        [TestCase(7, 11, "2d3+5")]
        [TestCase(7, 12, "1d6+6")]
        [TestCase(7, 16, "1d10+6")]
        [TestCase(7, 18, "1d12+6")]
        [TestCase(7, 30, "23d2-16")]
        [TestCase(7, 42, "5d8+2")]
        [TestCase(7, 50, "43d2-36")]
        [TestCase(8, 8, "8")]
        [TestCase(8, 9, "1d2+7")]
        [TestCase(8, 18, "2d6+6")]
        [TestCase(8, 16, "4d3+4")]
        [TestCase(9, 9, "9")]
        [TestCase(9, 14, "1d6+8")]
        [TestCase(9, 16, "1d8+8")]
        [TestCase(9, 30, "3d8+6")]
        [TestCase(10, 10, "10")]
        [TestCase(10, 11, "1d2+9")]
        [TestCase(10, 20, "2d6+8")]
        [TestCase(10, 24, "2d8+8")]
        [TestCase(10, 40, "6d6+4")]
        [TestCase(10, 50, "8d6+2")]
        [TestCase(10, 60, "10d6")]
        [TestCase(10, 80, "10d8")]
        [TestCase(10, 100, "10d10")]
        [TestCase(10, 120, "10d12")]
        [TestCase(11, 11, "11")]
        [TestCase(11, 20, "1d10+10")]
        [TestCase(11, 40, "29d2-18")]
        [TestCase(12, 12, "12")]
        [TestCase(12, 13, "1d2+11")]
        [TestCase(12, 22, "2d6+10")]
        [TestCase(12, 24, "4d4+8")]
        [TestCase(12, 30, "2d10+10")]
        [TestCase(13, 13, "13")]
        [TestCase(14, 14, "14")]
        [TestCase(14, 15, "1d2+13")]
        [TestCase(15, 15, "15")]
        [TestCase(15, 30, "3d6+12")]
        [TestCase(15, 50, "5d8+10")]
        [TestCase(15, 150, "15d10")]
        [TestCase(16, 16, "16")]
        [TestCase(16, 17, "1d2+15")]
        [TestCase(17, 17, "17")]
        [TestCase(18, 18, "18")]
        [TestCase(18, 19, "1d2+17")]
        [TestCase(18, 72, "6d10+12")]
        [TestCase(19, 19, "19")]
        [TestCase(20, 20, "20")]
        [TestCase(20, 50, "6d6+14")]
        [TestCase(20, 80, "12d6+8")]
        [TestCase(20, 150, "26d6-6")]
        [TestCase(20, 160, "20d8")]
        [TestCase(20, 200, "20d10")]
        [TestCase(20, 240, "20d12")]
        [TestCase(21, 30, "1d10+20")]
        [TestCase(21, 40, "1d20+20")]
        [TestCase(30, 50, "4d6+26")]
        [TestCase(30, 60, "6d6+24")]
        [TestCase(30, 100, "10d8+20")]
        [TestCase(30, 120, "10d10+20")]
        [TestCase(30, 180, "30d6")]
        [TestCase(30, 240, "30d8")]
        [TestCase(30, 300, "30d10")]
        [TestCase(30, 360, "30d12")]
        [TestCase(40, 160, "24d6+16")]
        [TestCase(40, 240, "40d6")]
        [TestCase(40, 320, "40d8")]
        [TestCase(40, 400, "40d10")]
        [TestCase(40, 480, "40d12")]
        [TestCase(42, 42, "42")]
        [TestCase(42, 96, "6d10+36")]
        [TestCase(42, 600, "62d10-20")]
        [TestCase(42, 783, "39d20+3")]
        [TestCase(42, 1336, "647d3-605")]
        [TestCase(42, 1337, "185d8-143")]
        [TestCase(42, 8245, "8203d2-8161")]
        [TestCase(42, 9266, "4612d3-4570")]
        [TestCase(42, 90210, "910d100+26d4-894")]
        [TestCase(50, 200, "30d6+20")]
        [TestCase(50, 300, "50d6")]
        [TestCase(45, 150, "15d8+30")]
        [TestCase(60, 240, "20d10+40")]
        [TestCase(60, 360, "60d6")]
        [TestCase(70, 160, "10d10+60")]
        [TestCase(70, 420, "50d8+20")]
        [TestCase(96, 96, "96")]
        [TestCase(96, 600, "56d10+40")]
        [TestCase(96, 783, "229d4-133")]
        [TestCase(96, 1336, "248d6-152")]
        [TestCase(96, 1337, "1241d2-1145")]
        [TestCase(96, 8245, "8149d2-8053")]
        [TestCase(96, 9266, "1310d8-1214")]
        [TestCase(96, 90210, "910d100+8d4-822")]
        [TestCase(100, 400, "60d6+40")]
        [TestCase(100, 600, "100d6")]
        [TestCase(100, 800, "100d8")]
        [TestCase(100, 1000, "100d10")]
        [TestCase(100, 1200, "100d12")]
        [TestCase(200, 800, "120d6+80")]
        [TestCase(200, 1200, "200d6")]
        [TestCase(200, 1600, "200d8")]
        [TestCase(200, 2000, "200d10")]
        [TestCase(300, 1200, "100d10+200")]
        [TestCase(300, 1800, "300d6")]
        [TestCase(300, 2400, "300d8")]
        [TestCase(300, 3000, "300d10")]
        [TestCase(300, 3600, "300d12")]
        [TestCase(400, 1600, "240d6+160")]
        [TestCase(400, 2400, "400d6")]
        [TestCase(400, 3200, "400d8")]
        [TestCase(400, 4000, "400d10")]
        [TestCase(400, 4800, "400d12")]
        [TestCase(437, 1204, "767d2-330")]
        [TestCase(500, 2000, "300d6+200")]
        [TestCase(500, 3000, "500d6")]
        [TestCase(600, 600, "600")]
        [TestCase(600, 783, "61d4+539")]
        [TestCase(600, 1336, "368d3+232")]
        [TestCase(600, 1337, "67d12+533")]
        [TestCase(600, 2400, "200d10+400")]
        [TestCase(600, 3600, "600d6")]
        [TestCase(600, 8245, "695d12-95")]
        [TestCase(600, 9266, "1238d8-638")]
        [TestCase(600, 90210, "905d100+3d6-308")]
        [TestCase(700, 4200, "500d8+200")]
        [TestCase(783, 783, "783")]
        [TestCase(783, 1336, "79d8+704")]
        [TestCase(783, 1337, "277d3+506")]
        [TestCase(783, 8245, "1066d8-283")]
        [TestCase(783, 9266, "8483d2-7700")]
        [TestCase(783, 90210, "903d100+6d6-126")]
        [TestCase(1000, 4000, "600d6+400")]
        [TestCase(1000, 6000, "1000d6")]
        [TestCase(1000, 8000, "1000d8")]
        [TestCase(1000, 10_000, "1000d10")]
        [TestCase(1000, 12_000, "1000d12")]
        [TestCase(1336, 1336, "1336")]
        [TestCase(1336, 1337, "1d2+1335")]
        [TestCase(1336, 8245, "987d8+349")]
        [TestCase(1336, 9266, "1586d6-250")]
        [TestCase(1336, 90210, "897d100+71d2+368")]
        [TestCase(1337, 1337, "1337")]
        [TestCase(1337, 8245, "628d12+709")]
        [TestCase(1337, 9266, "881d10+456")]
        [TestCase(1337, 90210, "897d100+10d8+430")]
        [TestCase(2000, 8000, "1200d6+800")]
        [TestCase(2000, 12_000, "2000d6")]
        [TestCase(2000, 16_000, "2000d8")]
        [TestCase(2000, 20_000, "2000d10")]
        [TestCase(2000, 24_000, "2000d12")]
        [TestCase(3000, 12_000, "1000d10+2000")]
        [TestCase(3000, 18_000, "3000d6")]
        [TestCase(3000, 24_000, "3000d8")]
        [TestCase(3000, 30_000, "3000d10")]
        [TestCase(3000, 36_000, "3000d12")]
        [TestCase(4000, 16_000, "2400d6+1600")]
        [TestCase(4000, 24_000, "4000d6")]
        [TestCase(4000, 32_000, "4000d8")]
        [TestCase(4000, 40_000, "4000d10")]
        [TestCase(4000, 48_000, "4000d12")]
        [TestCase(5000, 20_000, "3000d6+2000")]
        [TestCase(5000, 30_000, "5000d6")]
        [TestCase(5000, 40_000, "5000d8")]
        [TestCase(5000, 50_000, "5000d10")]
        [TestCase(5000, 60_000, "5000d12")]
        [TestCase(6000, 24_000, "2000d10+4000")]
        [TestCase(6000, 36_000, "6000d6")]
        [TestCase(6000, 48_000, "6000d8")]
        [TestCase(6000, 60_000, "6000d10")]
        [TestCase(6000, 72_000, "6000d12")]
        [TestCase(7000, 28_000, "3000d8+4000")]
        [TestCase(7000, 42_000, "5000d8+2000")]
        [TestCase(7000, 56_000, "7000d8")]
        [TestCase(7000, 70_000, "7000d10")]
        [TestCase(7000, 84_000, "7000d12")]
        [TestCase(8245, 8245, "8245")]
        [TestCase(8245, 9266, "1021d2+7224")]
        [TestCase(8245, 90210, "827d100+46d3+7372")]
        [TestCase(9266, 9266, "9266")]
        [TestCase(9266, 90210, "817d100+61d2+8388")]
        [TestCase(10_000, 40_000, "6000d6+4000")]
        [TestCase(10_000, 60_000, "10000d6")]
        [TestCase(10_000, 80_000, "10000d8")]
        [TestCase(10_000, 100_000, "10000d10")]
        [TestCase(10_000, 120_000, "10000d12")]
        [TestCase(20_000, 80_000, "606d100+2d4+19392")]
        [TestCase(20_000, 120_000, "1010d100+2d6+18988")]
        [TestCase(20_000, 160_000, "1414d100+2d8+18584")]
        [TestCase(20_000, 200_000, "1818d100+2d10+18180")]
        [TestCase(20_000, 240_000, "2222d100+2d12+17776")]
        [TestCase(30_000, 120_000, "10000d10+20000")]
        [TestCase(30_000, 180_000, "1515d100+3d6+28482")]
        [TestCase(30_000, 240_000, "2121d100+3d8+27876")]
        [TestCase(30_000, 300_000, "2727d100+3d10+27270")]
        [TestCase(30_000, 360_000, "3333d100+3d12+26664")]
        [TestCase(40_000, 160_000, "1212d100+4d4+38784")]
        [TestCase(40_000, 240_000, "2020d100+4d6+37976")]
        [TestCase(40_000, 320_000, "2828d100+4d8+37168")]
        [TestCase(40_000, 400_000, "3636d100+4d10+36360")]
        [TestCase(40_000, 480_000, "4444d100+4d12+35552")]
        [TestCase(50_000, 200_000, "1515d100+3d6+48482")]
        [TestCase(50_000, 300_000, "2525d100+5d6+47470")]
        [TestCase(50_000, 400_000, "3535d100+5d8+46460")]
        [TestCase(50_000, 500_000, "4545d100+5d10+45450")]
        [TestCase(50_000, 600_000, "5555d100+5d12+44440")]
        [TestCase(60_000, 240_000, "1818d100+2d10+58180")]
        [TestCase(60_000, 360_000, "3030d100+6d6+56964")]
        [TestCase(60_000, 480_000, "4242d100+6d8+55752")]
        [TestCase(60_000, 600_000, "5454d100+6d10+54540")]
        [TestCase(60_000, 720_000, "6666d100+6d12+53328")]
        [TestCase(70_000, 280_000, "2121d100+3d8+67876")]
        [TestCase(70_000, 420_000, "3535d100+5d8+66460")]
        [TestCase(70_000, 560_000, "4949d100+7d8+65044")]
        [TestCase(70_000, 700_000, "6363d100+7d10+63630")]
        [TestCase(70_000, 840_000, "7777d100+7d12+62216")]
        [TestCase(90_210, 90_210, "90210")]
        public void GetRollWithFewestDice(int lower, int upper, string expectedRoll)
        {
            stopwatch.Start();
            var roll = RollHelper.GetRollWithFewestDice(lower, upper);
            stopwatch.Stop();

            Assert.That(roll, Is.EqualTo(expectedRoll), $"[{lower},{upper}]");
            Assert.That(stopwatch.Elapsed, Is.LessThan(TimeSpan.FromSeconds(1)), $"[{lower},{upper}]");
        }

        [TestCase(1, 2, 2, "1")]
        [TestCase(5, 6, 50, "4d12-3")]
        [TestCase(6, 7, 9, "1d3")]
        [TestCase(6, 8, 10, "1d3+1")]
        [TestCase(6, 10, 18, "4d3")]
        [TestCase(9, 14, 27, "13d2-8")]
        [TestCase(9, 15, 27, "4d4+2")]
        [TestCase(12, 19, 36, "17d2-10")]
        [TestCase(15, 22, 45, "23d2-16")]
        public void GetRollWithFewestDice_WithBaseAmount(int baseAmount, int lower, int upper, string expectedRoll)
        {
            stopwatch.Start();
            var roll = RollHelper.GetRollWithFewestDice(baseAmount, lower, upper);
            stopwatch.Stop();

            Assert.That(roll, Is.EqualTo(expectedRoll), $"[{lower},{upper}]");
            Assert.That(stopwatch.Elapsed, Is.LessThan(TimeSpan.FromSeconds(1)), $"[{lower},{upper}]");
        }

        [TestCase(-2, -2, "-2")]
        [TestCase(-2, -1, "1d2-3")]
        [TestCase(-2, 0, "1d3-3")]
        [TestCase(-2, 2, "1d4+1d2-4")]
        [TestCase(-2, 3, "1d6-3")]
        [TestCase(-1, -1, "-1")]
        [TestCase(-1, 0, "1d2-2")]
        [TestCase(-1, 1, "1d3-2")]
        [TestCase(-1, 3, "1d4+1d2-3")]
        [TestCase(-1, 4, "1d6-2")]
        [TestCase(0, 0, "0")]
        [TestCase(0, 1, "1d2-1")]
        [TestCase(0, 2, "1d3-1")]
        [TestCase(0, 4, "1d4+1d2-2")]
        [TestCase(0, 5, "1d6-1")]
        [TestCase(1, 1, "1")]
        [TestCase(1, 2, "1d2")]
        [TestCase(1, 3, "1d3")]
        [TestCase(1, 4, "1d4")]
        [TestCase(1, 5, "1d4+1d2-1")]
        [TestCase(1, 6, "1d6")]
        [TestCase(1, 7, "1d6+1d2-1")]
        [TestCase(1, 8, "1d8")]
        [TestCase(1, 9, "1d8+1d2-1")]
        [TestCase(1, 10, "1d10")]
        [TestCase(1, 11, "1d10+1d2-1")]
        [TestCase(1, 12, "1d12")]
        [TestCase(1, 20, "1d20")]
        [TestCase(1, 36, "1d20+1d12+1d6-2")]
        [TestCase(1, 48, "2d20+1d10-2")]
        [TestCase(1, 52, "2d20+1d12+1d3-3")]
        [TestCase(1, 100, "1d100")]
        [TestCase(1, 103, "1d100+1d4-1")]
        [TestCase(1, 1000, "10d100+1d10-10")]
        [TestCase(1, 10_000, "101d100-100")]
        [TestCase(1, 100_000, "1010d100+1d10-1010")]
        [TestCase(1, 1_000_000, "Error", Ignore = "Can't generate this range without multipliers")]
        [TestCase(2, 2, "2")]
        [TestCase(2, 3, "1d2+1")]
        [TestCase(2, 4, "1d3+1")]
        [TestCase(2, 5, "1d4+1")]
        [TestCase(2, 6, "1d4+1d2")]
        [TestCase(2, 7, "1d6+1")]
        [TestCase(2, 8, "1d6+1d2")]
        [TestCase(2, 10, "1d8+1d2")]
        [TestCase(2, 12, "1d10+1d2")]
        [TestCase(2, 13, "1d12+1")]
        [TestCase(2, 15, "1d12+1d3")]
        [TestCase(2, 20, "1d12+1d8")]
        [TestCase(2, 24, "1d20+1d4")]
        [TestCase(2, 40, "2d20")]
        [TestCase(2, 200, "2d100")]
        [TestCase(3, 3, "3")]
        [TestCase(3, 4, "1d2+2")]
        [TestCase(3, 5, "1d3+2")]
        [TestCase(3, 6, "1d4+2")]
        [TestCase(3, 8, "1d6+2")]
        [TestCase(3, 9, "1d6+1d2+1")]
        [TestCase(3, 10, "1d8+2")]
        [TestCase(3, 12, "1d10+2")]
        [TestCase(3, 13, "1d10+1d2+1")]
        [TestCase(3, 18, "1d12+1d4+1d2")]
        [TestCase(3, 20, "1d12+1d6+1d2")]
        [TestCase(3, 24, "1d20+1d3+1")]
        [TestCase(3, 28, "1d20+1d6+1d2")]
        [TestCase(3, 30, "1d20+1d8+1d2")]
        [TestCase(3, 36, "1d20+1d12+1d4")]
        [TestCase(4, 4, "4")]
        [TestCase(4, 5, "1d2+3")]
        [TestCase(4, 6, "1d3+3")]
        [TestCase(4, 7, "1d4+3")]
        [TestCase(4, 8, "1d4+1d2+2")]
        [TestCase(4, 9, "1d6+3")]
        [TestCase(4, 10, "1d6+1d2+2")]
        [TestCase(4, 12, "1d8+1d2+2")]
        [TestCase(4, 16, "1d12+1d2+2")]
        [TestCase(4, 24, "1d20+1d2+2")]
        [TestCase(4, 32, "1d20+1d10+2")]
        [TestCase(4, 40, "1d20+1d12+1d6+1d2")]
        [TestCase(4, 48, "2d20+1d6+1d2")]
        [TestCase(5, 5, "5")]
        [TestCase(5, 8, "1d4+4")]
        [TestCase(5, 9, "1d4+1d2+3")]
        [TestCase(5, 10, "1d6+4")]
        [TestCase(5, 12, "1d8+4")]
        [TestCase(5, 13, "1d8+1d2+3")]
        [TestCase(5, 14, "1d10+4")]
        [TestCase(5, 16, "1d12+4")]
        [TestCase(5, 18, "1d12+1d3+3")]
        [TestCase(5, 20, "1d12+1d4+1d2+2")]
        [TestCase(5, 30, "1d20+1d6+1d2+2")]
        [TestCase(5, 40, "1d20+1d12+1d6+2")]
        [TestCase(5, 50, "2d20+1d8+2")]
        [TestCase(5, 60, "2d20+1d12+1d6+1d2")]
        [TestCase(6, 6, "6")]
        [TestCase(6, 7, "1d2+5")]
        [TestCase(6, 8, "1d3+5")]
        [TestCase(6, 9, "1d4+5")]
        [TestCase(6, 10, "1d4+1d2+4")]
        [TestCase(6, 11, "1d6+5")]
        [TestCase(6, 13, "1d8+5")]
        [TestCase(6, 15, "1d10+5")]
        [TestCase(6, 18, "1d12+1d2+4")]
        [TestCase(6, 20, "1d12+1d4+4")]
        [TestCase(6, 24, "1d12+1d8+4")]
        [TestCase(6, 30, "1d20+1d6+4")]
        [TestCase(6, 36, "1d20+1d12+4")]
        [TestCase(6, 45, "2d20+1d2+3")]
        [TestCase(7, 7, "7")]
        [TestCase(7, 10, "1d4+6")]
        [TestCase(7, 11, "1d4+1d2+5")]
        [TestCase(7, 12, "1d6+6")]
        [TestCase(7, 16, "1d10+6")]
        [TestCase(7, 18, "1d12+6")]
        [TestCase(7, 30, "1d20+1d4+1d2+4")]
        [TestCase(7, 42, "1d20+1d12+1d6+4")]
        [TestCase(7, 50, "2d20+1d6+4")]
        [TestCase(8, 8, "8")]
        [TestCase(8, 9, "1d2+7")]
        [TestCase(8, 18, "1d10+1d2+6")]
        [TestCase(8, 16, "1d8+1d2+6")]
        [TestCase(9, 9, "9")]
        [TestCase(9, 14, "1d6+8")]
        [TestCase(9, 16, "1d8+8")]
        [TestCase(9, 30, "1d20+1d3+7")]
        [TestCase(10, 10, "10")]
        [TestCase(10, 11, "1d2+9")]
        [TestCase(10, 20, "1d10+1d2+8")]
        [TestCase(10, 24, "1d12+1d4+8")]
        [TestCase(10, 40, "1d20+1d12+8")]
        [TestCase(10, 50, "2d20+1d3+7")]
        [TestCase(10, 60, "2d20+1d12+1d2+6")]
        [TestCase(10, 80, "3d20+1d12+1d3+5")]
        [TestCase(10, 100, "4d20+1d12+1d4+4")]
        [TestCase(10, 120, "1d100+1d12+8")]
        [TestCase(11, 11, "11")]
        [TestCase(11, 20, "1d10+10")]
        [TestCase(11, 40, "1d20+1d10+1d2+8")]
        [TestCase(12, 12, "12")]
        [TestCase(12, 13, "1d2+11")]
        [TestCase(12, 22, "1d10+1d2+10")]
        [TestCase(12, 24, "1d12+1d2+10")]
        [TestCase(12, 30, "1d12+1d8+10")]
        [TestCase(13, 13, "13")]
        [TestCase(14, 14, "14")]
        [TestCase(14, 15, "1d2+13")]
        [TestCase(15, 15, "15")]
        [TestCase(15, 30, "1d12+1d4+1d2+12")]
        [TestCase(15, 50, "1d20+1d12+1d6+12")]
        [TestCase(15, 150, "1d100+1d20+1d12+1d6+1d2+10")]
        [TestCase(16, 16, "16")]
        [TestCase(16, 17, "1d2+15")]
        [TestCase(17, 17, "17")]
        [TestCase(18, 18, "18")]
        [TestCase(18, 19, "1d2+17")]
        [TestCase(18, 72, "2d20+1d12+1d6+14")]
        [TestCase(19, 19, "19")]
        [TestCase(20, 20, "20")]
        [TestCase(20, 50, "1d20+1d12+18")]
        [TestCase(20, 80, "3d20+1d4+16")]
        [TestCase(20, 150, "1d100+1d20+1d12+1d2+16")]
        [TestCase(20, 160, "1d100+2d20+1d4+16")]
        [TestCase(20, 200, "1d100+4d20+1d6+14")]
        [TestCase(20, 240, "2d100+1d20+1d4+16")]
        [TestCase(21, 30, "1d10+20")]
        [TestCase(21, 40, "1d20+20")]
        [TestCase(30, 50, "1d20+1d2+28")]
        [TestCase(30, 60, "1d20+1d12+28")]
        [TestCase(30, 100, "3d20+1d12+1d3+25")]
        [TestCase(30, 120, "4d20+1d12+1d4+24")]
        [TestCase(30, 180, "1d100+2d20+1d12+1d3+25")]
        [TestCase(30, 240, "2d100+1d12+1d2+26")]
        [TestCase(30, 300, "2d100+3d20+1d12+1d4+1d2+22")]
        [TestCase(30, 360, "3d100+1d20+1d12+1d4+24")]
        [TestCase(40, 160, "1d100+1d20+1d3+37")]
        [TestCase(40, 240, "2d100+1d3+37")]
        [TestCase(40, 320, "2d100+4d20+1d6+1d2+32")]
        [TestCase(40, 400, "3d100+3d20+1d6+1d2+32")]
        [TestCase(40, 480, "4d100+2d20+1d6+1d2+32")]
        [TestCase(42, 42, "42")]
        [TestCase(42, 96, "2d20+1d12+1d6+38")]
        [TestCase(42, 600, "5d100+3d20+1d6+1d2+32")]
        [TestCase(42, 783, "7d100+2d20+1d10+1d2+31")]
        [TestCase(42, 1336, "13d100+1d8+28")]
        [TestCase(42, 1337, "13d100+1d8+1d2+27")]
        [TestCase(42, 8245, "82d100+4d20+1d10-45")]
        [TestCase(42, 9266, "93d100+1d12+1d6+1d2-54")]
        [TestCase(42, 90210, "910d100+4d20+1d3-873")]
        [TestCase(45, 150, "1d100+1d6+1d2+42")]
        [TestCase(50, 200, "1d100+2d20+1d12+1d3+45")]
        [TestCase(50, 300, "2d100+2d20+1d12+1d4+44")]
        [TestCase(60, 240, "1d100+4d20+1d6+54")]
        [TestCase(60, 360, "3d100+1d4+56")]
        [TestCase(70, 160, "4d20+1d12+1d4+64")]
        [TestCase(70, 420, "3d100+2d20+1d12+1d4+1d2+62")]
        [TestCase(96, 96, "96")]
        [TestCase(96, 600, "5d100+1d10+90")]
        [TestCase(96, 783, "6d100+4d20+1d12+1d6+1d2+83")]
        [TestCase(96, 1336, "12d100+2d20+1d12+1d4+80")]
        [TestCase(96, 1337, "12d100+2d20+1d12+1d4+1d2+79")]
        [TestCase(96, 8245, "82d100+1d20+1d12+1d2+11")]
        [TestCase(96, 9266, "92d100+3d20+1d6")]
        [TestCase(96, 90210, "910d100+1d20+1d6-816")]
        [TestCase(100, 400, "3d100+1d4+96")]
        [TestCase(100, 600, "5d100+1d6+94")]
        [TestCase(100, 800, "7d100+1d8+92")]
        [TestCase(100, 1000, "9d100+1d10+90")]
        [TestCase(100, 1200, "11d100+1d12+88")]
        [TestCase(200, 800, "6d100+1d6+1d2+192")]
        [TestCase(200, 1200, "10d100+1d10+1d2+188")]
        [TestCase(200, 1600, "14d100+1d12+1d4+184")]
        [TestCase(200, 2000, "18d100+1d12+1d8+180")]
        [TestCase(300, 1200, "9d100+1d10+290")]
        [TestCase(300, 1800, "15d100+1d12+1d4+1d2+282")]
        [TestCase(300, 2400, "21d100+1d20+1d3+277")]
        [TestCase(300, 3000, "27d100+1d20+1d8+1d2+270")]
        [TestCase(300, 3600, "33d100+1d20+1d12+1d4+264")]
        [TestCase(400, 1600, "12d100+1d12+1d2+386")]
        [TestCase(400, 2400, "20d100+1d20+1d2+378")]
        [TestCase(400, 3200, "28d100+1d20+1d10+370")]
        [TestCase(400, 4000, "36d100+1d20+1d12+1d6+1d2+360")]
        [TestCase(400, 4800, "44d100+2d20+1d6+1d2+352")]
        [TestCase(437, 1204, "7d100+3d20+1d12+1d6+1d2+424")]
        [TestCase(500, 2000, "15d100+1d12+1d4+1d2+482")]
        [TestCase(500, 3000, "25d100+1d20+1d6+1d2+472")]
        [TestCase(600, 600, "600")]
        [TestCase(600, 783, "1d100+4d20+1d8+1d2+593")]
        [TestCase(600, 1336, "7d100+2d20+1d6+590")]
        [TestCase(600, 1337, "7d100+2d20+1d6+1d2+589")]
        [TestCase(600, 2400, "18d100+1d12+1d8+580")]
        [TestCase(600, 3600, "30d100+1d20+1d12+568")]
        [TestCase(600, 8245, "77d100+1d20+1d4+521")]
        [TestCase(600, 9266, "87d100+2d20+1d12+1d4+1d2+508")]
        [TestCase(600, 90210, "905d100+1d12+1d4+1d2-308")]
        [TestCase(700, 4200, "35d100+1d20+1d12+1d6+662")]
        [TestCase(783, 783, "783")]
        [TestCase(783, 1336, "5d100+3d20+1d2+774")]
        [TestCase(783, 1337, "5d100+3d20+1d3+774")]
        [TestCase(783, 8245, "75d100+1d20+1d12+1d8+705")]
        [TestCase(783, 9266, "85d100+3d20+1d12+694")]
        [TestCase(783, 90210, "903d100+1d20+1d12-122")]
        [TestCase(1000, 4000, "30d100+1d20+1d12+968")]
        [TestCase(1000, 6000, "50d100+2d20+1d12+1d2+946")]
        [TestCase(1000, 8000, "70d100+3d20+1d12+1d3+925")]
        [TestCase(1000, 10_000, "90d100+4d20+1d12+1d4+904")]
        [TestCase(1000, 12_000, "111d100+1d12+888")]
        [TestCase(1336, 1336, "1336")]
        [TestCase(1336, 1337, "1d2+1335")]
        [TestCase(1336, 8245, "69d100+4d20+1d3+1262")]
        [TestCase(1336, 9266, "80d100+1d10+1d2+1254")]
        [TestCase(1336, 90210, "897d100+3d20+1d12+1d4+434")]
        [TestCase(1337, 1337, "1337")]
        [TestCase(1337, 8245, "69d100+4d20+1d2+1263")]
        [TestCase(1337, 9266, "80d100+1d10+1256")]
        [TestCase(1337, 90210, "897d100+3d20+1d12+1d3+435")]
        [TestCase(2000, 8000, "60d100+3d20+1d4+1936")]
        [TestCase(2000, 12_000, "101d100+1d2+1898")]
        [TestCase(2000, 16_000, "141d100+2d20+1d4+1856")]
        [TestCase(2000, 20_000, "181d100+4d20+1d6+1814")]
        [TestCase(3000, 12_000, "90d100+4d20+1d12+1d4+2904")]
        [TestCase(3000, 18_000, "151d100+2d20+1d12+1d3+2845")]
        [TestCase(3000, 24_000, "212d100+1d12+1d2+2786")]
        [TestCase(3000, 30_000, "272d100+3d20+1d12+1d4+1d2+2722")]
        [TestCase(3000, 36_000, "333d100+1d20+1d12+1d4+2664")]
        [TestCase(4000, 16_000, "121d100+1d20+1d3+3877")]
        [TestCase(4000, 24_000, "202d100+1d3+3797")]
        [TestCase(4000, 32_000, "282d100+4d20+1d6+1d2+3712")]
        [TestCase(4000, 40_000, "363d100+3d20+1d6+1d2+3632")]
        [TestCase(4000, 48_000, "444d100+2d20+1d6+1d2+3552")]
        [TestCase(5000, 20_000, "151d100+2d20+1d12+1d3+4845")]
        [TestCase(5000, 30_000, "252d100+2d20+1d12+1d4+4744")]
        [TestCase(6000, 24_000, "181d100+4d20+1d6+5814")]
        [TestCase(6000, 36_000, "303d100+1d4+5696")]
        [TestCase(7000, 42_000, "353d100+2d20+1d12+1d4+1d2+6642")]
        [TestCase(8245, 8245, "8245")]
        [TestCase(8245, 9266, "10d100+1d20+1d12+1d2+8232")]
        [TestCase(8245, 90210, "827d100+4d20+1d12+1d6+7412")]
        [TestCase(9266, 9266, "9266")]
        [TestCase(9266, 90210, "817d100+3d20+1d4+1d2+8444")]
        [TestCase(10_000, 40_000, "303d100+1d4+9696")]
        [TestCase(10_000, 60_000, "505d100+1d6+9494")]
        [TestCase(10_000, 80_000, "707d100+1d8+9292")]
        [TestCase(10_000, 100_000, "909d100+1d10+9090")]
        [TestCase(10_000, 120_000, "1111d100+1d12+8888")]
        [TestCase(20_000, 80_000, "606d100+1d6+1d2+19392")]
        [TestCase(20_000, 120_000, "1010d100+1d10+1d2+18988")]
        [TestCase(20_000, 160_000, "1414d100+1d12+1d4+18584")]
        [TestCase(20_000, 200_000, "1818d100+1d12+1d8+18180")]
        [TestCase(30_000, 120_000, "909d100+1d10+29090")]
        [TestCase(30_000, 180_000, "1515d100+1d12+1d4+1d2+28482")]
        [TestCase(30_000, 240_000, "2121d100+1d20+1d3+27877")]
        [TestCase(30_000, 300_000, "2727d100+1d20+1d8+1d2+27270")]
        [TestCase(30_000, 360_000, "3333d100+1d20+1d12+1d4+26664")]
        [TestCase(40_000, 160_000, "1212d100+1d12+1d2+38786")]
        [TestCase(40_000, 240_000, "2020d100+1d20+1d2+37978")]
        [TestCase(40_000, 320_000, "2828d100+1d20+1d10+37170")]
        [TestCase(40_000, 400_000, "3636d100+1d20+1d12+1d6+1d2+36360")]
        [TestCase(40_000, 480_000, "4444d100+2d20+1d6+1d2+35552")]
        [TestCase(50_000, 200_000, "1515d100+1d12+1d4+1d2+48482")]
        [TestCase(50_000, 300_000, "2525d100+1d20+1d6+1d2+47472")]
        [TestCase(60_000, 240_000, "1818d100+1d12+1d8+58180")]
        [TestCase(60_000, 360_000, "3030d100+1d20+1d12+56968")]
        [TestCase(70_000, 420_000, "3535d100+1d20+1d12+1d6+66462")]
        [TestCase(90_210, 90_210, "90210")]
        public void GetRollWithMostEvenDistribution(int lower, int upper, string expectedRoll)
        {
            stopwatch.Start();
            var roll = RollHelper.GetRollWithMostEvenDistribution(lower, upper);
            stopwatch.Stop();

            Assert.That(roll, Is.EqualTo(expectedRoll), $"[{lower},{upper}]");
            Assert.That(stopwatch.Elapsed, Is.LessThan(TimeSpan.FromSeconds(1)), $"[{lower},{upper}]");
        }

        [TestCase(1, 2, 2, "1")]
        [TestCase(5, 6, 50, "2d20+1d6+1d2-3")]
        [TestCase(6, 7, 9, "1d3")]
        [TestCase(6, 8, 10, "1d3+1")]
        [TestCase(6, 10, 18, "1d8+1d2+2")]
        [TestCase(9, 14, 27, "1d12+1d3+3")]
        [TestCase(9, 15, 27, "1d12+1d2+4")]
        [TestCase(12, 19, 36, "1d12+1d6+1d2+4")]
        [TestCase(15, 22, 45, "1d20+1d4+1d2+4")]
        public void GetRollWithMostEvenDistribution_WithBaseAmount(int baseAmount, int lower, int upper, string expectedRoll)
        {
            stopwatch.Start();
            var roll = RollHelper.GetRollWithMostEvenDistribution(baseAmount, lower, upper);
            stopwatch.Stop();

            Assert.That(roll, Is.EqualTo(expectedRoll), $"[{lower},{upper}]");
            Assert.That(stopwatch.Elapsed, Is.LessThan(TimeSpan.FromSeconds(1)), $"[{lower},{upper}]");
        }

        [TestCase(-2, -2, "-2")]
        [TestCase(-2, -1, "1d2-3")]
        [TestCase(-2, 0, "1d3-3")]
        [TestCase(-2, 2, "1d4+1d2-4")]
        [TestCase(-2, 3, "1d6-3")]
        [TestCase(-1, -1, "-1")]
        [TestCase(-1, 0, "1d2-2")]
        [TestCase(-1, 1, "1d3-2")]
        [TestCase(-1, 3, "1d4+1d2-3")]
        [TestCase(-1, 4, "1d6-2")]
        [TestCase(0, 0, "0")]
        [TestCase(0, 1, "1d2-1")]
        [TestCase(0, 2, "1d3-1")]
        [TestCase(0, 4, "1d4+1d2-2")]
        [TestCase(0, 5, "1d6-1")]
        [TestCase(1, 1, "1")]
        [TestCase(1, 2, "1d2")]
        [TestCase(1, 3, "1d3")]
        [TestCase(1, 4, "1d4")]
        [TestCase(1, 5, "1d4+1d2-1")]
        [TestCase(1, 6, "1d6")]
        [TestCase(1, 7, "1d6+1d2-1")]
        [TestCase(1, 8, "1d8")]
        [TestCase(1, 9, "(1d3-1)*3+1d3")]
        [TestCase(1, 10, "1d10")]
        [TestCase(1, 11, "1d10+1d2-1")]
        [TestCase(1, 12, "1d12")]
        [TestCase(1, 20, "1d20")]
        [TestCase(1, 36, "(1d12-1)*3+1d3")]
        [TestCase(1, 48, "(1d12-1)*4+1d4")]
        [TestCase(1, 52, "(1d4-1)*13+1d12+1d2-1")]
        [TestCase(1, 100, "1d100")]
        [TestCase(1, 103, "1d100+1d4-1")]
        [TestCase(1, 1000, "(1d100-1)*10+1d10")]
        [TestCase(1, 10_000, "(1d100-1)*100+1d100")]
        [TestCase(1, 100_000, "(1d100-1)*1000+(1d100-1)*10+1d10")]
        [TestCase(1, 1_000_000, "(1d100-1)*10000+(1d100-1)*100+1d100")]
        [TestCase(2, 2, "2")]
        [TestCase(2, 3, "1d2+1")]
        [TestCase(2, 4, "1d3+1")]
        [TestCase(2, 5, "1d4+1")]
        [TestCase(2, 6, "1d4+1d2")]
        [TestCase(2, 7, "1d6+1")]
        [TestCase(2, 8, "1d6+1d2")]
        [TestCase(2, 10, "(1d3-1)*3+1d3+1")]
        [TestCase(2, 12, "1d10+1d2")]
        [TestCase(2, 13, "1d12+1")]
        [TestCase(2, 15, "(1d2-1)*7+1d6+1d2")]
        [TestCase(2, 20, "1d12+1d8")]
        [TestCase(2, 24, "1d20+1d4")]
        [TestCase(2, 40, "(1d3-1)*13+1d12+1d2")]
        [TestCase(2, 200, "2d100")]
        [TestCase(3, 3, "3")]
        [TestCase(3, 4, "1d2+2")]
        [TestCase(3, 5, "1d3+2")]
        [TestCase(3, 6, "1d4+2")]
        [TestCase(3, 8, "1d6+2")]
        [TestCase(3, 9, "1d6+1d2+1")]
        [TestCase(3, 10, "1d8+2")]
        [TestCase(3, 12, "1d10+2")]
        [TestCase(3, 13, "1d10+1d2+1")]
        [TestCase(3, 18, "(1d8-1)*2+1d2+2")]
        [TestCase(3, 20, "(1d6-1)*3+1d3+2")]
        [TestCase(3, 24, "(1d2-1)*11+1d10+1d2+1")]
        [TestCase(3, 28, "(1d2-1)*13+1d12+1d2+1")]
        [TestCase(3, 30, "(1d4-1)*7+1d6+1d2+1")]
        [TestCase(3, 36, "(1d2-1)*17+1d12+1d6+1")]
        [TestCase(4, 4, "4")]
        [TestCase(4, 5, "1d2+3")]
        [TestCase(4, 6, "1d3+3")]
        [TestCase(4, 7, "1d4+3")]
        [TestCase(4, 8, "1d4+1d2+2")]
        [TestCase(4, 9, "1d6+3")]
        [TestCase(4, 10, "1d6+1d2+2")]
        [TestCase(4, 12, "(1d3-1)*3+1d3+3")]
        [TestCase(4, 16, "1d12+1d2+2")]
        [TestCase(4, 24, "(1d3-1)*7+1d6+1d2+2")]
        [TestCase(4, 32, "1d20+1d10+2")]
        [TestCase(4, 40, "1d20+1d12+1d6+1d2")]
        [TestCase(4, 48, "(1d3-1)*15+(1d3-1)*5+1d4+1d2+2")]
        [TestCase(5, 5, "5")]
        [TestCase(5, 8, "1d4+4")]
        [TestCase(5, 9, "1d4+1d2+3")]
        [TestCase(5, 10, "1d6+4")]
        [TestCase(5, 12, "1d8+4")]
        [TestCase(5, 13, "(1d3-1)*3+1d3+4")]
        [TestCase(5, 14, "1d10+4")]
        [TestCase(5, 16, "1d12+4")]
        [TestCase(5, 18, "(1d2-1)*7+1d6+1d2+3")]
        [TestCase(5, 20, "(1d8-1)*2+1d2+4")]
        [TestCase(5, 30, "(1d2-1)*13+1d12+1d2+3")]
        [TestCase(5, 40, "(1d12-1)*3+1d3+4")]
        [TestCase(5, 50, "(1d2-1)*23+1d20+1d4+3")]
        [TestCase(5, 60, "(1d8-1)*7+1d6+1d2+3")]
        [TestCase(6, 6, "6")]
        [TestCase(6, 7, "1d2+5")]
        [TestCase(6, 8, "1d3+5")]
        [TestCase(6, 9, "1d4+5")]
        [TestCase(6, 10, "1d4+1d2+4")]
        [TestCase(6, 11, "1d6+5")]
        [TestCase(6, 13, "1d8+5")]
        [TestCase(6, 15, "1d10+5")]
        [TestCase(6, 18, "1d12+1d2+4")]
        [TestCase(6, 20, "(1d3-1)*5+1d4+1d2+4")]
        [TestCase(6, 24, "1d12+1d8+4")]
        [TestCase(6, 30, "1d20+1d6+4")]
        [TestCase(6, 36, "1d20+1d12+4")]
        [TestCase(6, 45, "(1d20-1)*2+1d2+5")]
        [TestCase(7, 7, "7")]
        [TestCase(7, 10, "1d4+6")]
        [TestCase(7, 11, "1d4+1d2+5")]
        [TestCase(7, 12, "1d6+6")]
        [TestCase(7, 16, "1d10+6")]
        [TestCase(7, 18, "1d12+6")]
        [TestCase(7, 30, "(1d12-1)*2+1d2+6")]
        [TestCase(7, 42, "(1d12-1)*3+1d3+6")]
        [TestCase(7, 50, "(1d4-1)*11+1d10+1d2+5")]
        [TestCase(8, 8, "8")]
        [TestCase(8, 9, "1d2+7")]
        [TestCase(8, 18, "1d10+1d2+6")]
        [TestCase(8, 16, "(1d3-1)*3+1d3+7")]
        [TestCase(9, 9, "9")]
        [TestCase(9, 14, "1d6+8")]
        [TestCase(9, 16, "1d8+8")]
        [TestCase(9, 30, "(1d2-1)*11+1d10+1d2+7")]
        [TestCase(10, 10, "10")]
        [TestCase(10, 11, "1d2+9")]
        [TestCase(10, 20, "1d10+1d2+8")]
        [TestCase(10, 24, "(1d3-1)*5+1d4+1d2+8")]
        [TestCase(10, 40, "1d20+1d12+8")]
        [TestCase(10, 50, "2d20+1d3+7")]
        [TestCase(10, 60, "(1d3-1)*17+1d12+1d6+8")]
        [TestCase(10, 80, "3d20+1d12+1d3+5")]
        [TestCase(10, 100, "4d20+1d12+1d4+4")]
        [TestCase(10, 120, "(1d3-1)*37+1d20+1d12+1d6+1d2+6")]
        [TestCase(11, 11, "11")]
        [TestCase(11, 20, "1d10+10")]
        [TestCase(11, 40, "(1d10-1)*3+1d3+10")]
        [TestCase(12, 12, "12")]
        [TestCase(12, 13, "1d2+11")]
        [TestCase(12, 22, "1d10+1d2+10")]
        [TestCase(12, 24, "1d12+1d2+10")]
        [TestCase(12, 30, "1d12+1d8+10")]
        [TestCase(13, 13, "13")]
        [TestCase(14, 14, "14")]
        [TestCase(14, 15, "1d2+13")]
        [TestCase(15, 15, "15")]
        [TestCase(15, 30, "(1d8-1)*2+1d2+14")]
        [TestCase(15, 50, "(1d12-1)*3+1d3+14")]
        [TestCase(15, 150, "(1d8-1)*17+1d12+1d6+13")]
        [TestCase(16, 16, "16")]
        [TestCase(16, 17, "1d2+15")]
        [TestCase(17, 17, "17")]
        [TestCase(18, 18, "18")]
        [TestCase(18, 19, "1d2+17")]
        [TestCase(18, 72, "2d20+1d12+1d6+14")]
        [TestCase(19, 19, "19")]
        [TestCase(20, 20, "20")]
        [TestCase(20, 50, "1d20+1d12+18")]
        [TestCase(20, 80, "3d20+1d4+16")]
        [TestCase(20, 150, "1d100+1d20+1d12+1d2+16")]
        [TestCase(20, 160, "(1d3-1)*47+2d20+1d8+1d2+16")]
        [TestCase(20, 200, "1d100+4d20+1d6+14")]
        [TestCase(20, 240, "2d100+1d20+1d4+16")]
        [TestCase(21, 30, "1d10+20")]
        [TestCase(21, 40, "1d20+20")]
        [TestCase(30, 50, "(1d3-1)*7+1d6+1d2+28")]
        [TestCase(30, 60, "1d20+1d12+28")]
        [TestCase(30, 100, "3d20+1d12+1d3+25")]
        [TestCase(30, 120, "4d20+1d12+1d4+24")]
        [TestCase(30, 180, "1d100+2d20+1d12+1d3+25")]
        [TestCase(30, 240, "2d100+1d12+1d2+26")]
        [TestCase(30, 300, "2d100+3d20+1d12+1d4+1d2+22")]
        [TestCase(30, 360, "3d100+1d20+1d12+1d4+24")]
        [TestCase(40, 160, "1d100+1d20+1d3+37")]
        [TestCase(40, 240, "(1d3-1)*67+3d20+1d10+36")]
        [TestCase(40, 320, "2d100+4d20+1d6+1d2+32")]
        [TestCase(40, 400, "3d100+3d20+1d6+1d2+32")]
        [TestCase(40, 480, "(1d3-1)*147+(1d3-1)*49+2d20+1d10+1d2+36")]
        [TestCase(42, 42, "42")]
        [TestCase(42, 96, "2d20+1d12+1d6+38")]
        [TestCase(42, 600, "5d100+3d20+1d6+1d2+32")]
        [TestCase(42, 783, "(1d2-1)*371+3d100+3d20+1d12+1d6+34")]
        [TestCase(42, 1336, "13d100+1d8+28")]
        [TestCase(42, 1337, "(1d12-1)*108+(1d12-1)*9+(1d3-1)*3+1d3+41")]
        [TestCase(42, 8245, "(1d4-1)*2051+20d100+3d20+1d12+1d3+17")]
        [TestCase(42, 9266, "(1d3-1)*3075+(1d3-1)*1025+10d100+1d20+1d12+1d4+1d2+28")]
        [TestCase(42, 90210, "910d100+4d20+1d3-873")]
        [TestCase(45, 150, "(1d2-1)*53+2d20+1d12+1d4+41")]
        [TestCase(50, 200, "1d100+2d20+1d12+1d3+45")]
        [TestCase(50, 300, "2d100+2d20+1d12+1d4+44")]
        [TestCase(60, 240, "1d100+4d20+1d6+54")]
        [TestCase(60, 360, "3d100+1d4+56")]
        [TestCase(70, 160, "4d20+1d12+1d4+64")]
        [TestCase(70, 420, "(1d3-1)*117+(1d3-1)*39+(1d3-1)*13+1d12+1d2+68")]
        [TestCase(96, 96, "96")]
        [TestCase(96, 600, "5d100+1d10+90")]
        [TestCase(96, 783, "(1d8-1)*86+(1d2-1)*43+2d20+1d4+1d2+92")]
        [TestCase(96, 1336, "12d100+2d20+1d12+1d4+80")]
        [TestCase(96, 1337, "(1d6-1)*207+(1d3-1)*69+(1d3-1)*23+1d20+1d4+94")]
        [TestCase(96, 8245, "(1d10-1)*815+8d100+1d20+1d4+86")]
        [TestCase(96, 9266, "(1d3-1)*3057+(1d3-1)*1019+10d100+1d20+1d10+84")]
        [TestCase(96, 90210, "910d100+1d20+1d6-816")]
        [TestCase(100, 400, "3d100+1d4+96")]
        [TestCase(100, 600, "(1d3-1)*167+1d100+3d20+1d10+1d2+94")]
        [TestCase(100, 800, "7d100+1d8+92")]
        [TestCase(100, 1000, "9d100+1d10+90")]
        [TestCase(100, 1200, "(1d3-1)*367+3d100+3d20+1d12+1d2+92")]
        [TestCase(200, 800, "6d100+1d6+1d2+192")]
        [TestCase(200, 1200, "10d100+1d10+1d2+188")]
        [TestCase(200, 1600, "(1d3-1)*467+4d100+3d20+1d12+1d3+191")]
        [TestCase(200, 2000, "18d100+1d12+1d8+180")]
        [TestCase(300, 1200, "9d100+1d10+290")]
        [TestCase(300, 1800, "15d100+1d12+1d4+1d2+282")]
        [TestCase(300, 2400, "21d100+1d20+1d3+277")]
        [TestCase(300, 3000, "27d100+1d20+1d8+1d2+270")]
        [TestCase(300, 3600, "33d100+1d20+1d12+1d4+264")]
        [TestCase(400, 1600, "12d100+1d12+1d2+386")]
        [TestCase(400, 2400, "(1d3-1)*667+6d100+3d20+1d12+1d4+1d2+388")]
        [TestCase(400, 3200, "28d100+1d20+1d10+370")]
        [TestCase(400, 4000, "36d100+1d20+1d12+1d6+1d2+360")]
        [TestCase(400, 4800, "(1d3-1)*1467+(1d3-1)*489+(1d3-1)*163+1d100+3d20+1d6+1d2+394")]
        [TestCase(437, 1204, "(1d12-1)*64+(1d8-1)*8+1d8+436")]
        [TestCase(500, 2000, "15d100+1d12+1d4+1d2+482")]
        [TestCase(500, 3000, "25d100+1d20+1d6+1d2+472")]
        [TestCase(600, 600, "600")]
        [TestCase(600, 783, "(1d8-1)*23+1d20+1d4+598")]
        [TestCase(600, 1336, "7d100+2d20+1d6+590")]
        [TestCase(600, 1337, "(1d6-1)*123+(1d3-1)*41+2d20+1d3+597")]
        [TestCase(600, 2400, "18d100+1d12+1d8+580")]
        [TestCase(600, 3600, "30d100+1d20+1d12+568")]
        [TestCase(600, 8245, "(1d2-1)*3823+38d100+3d20+1d4+558")]
        [TestCase(600, 9266, "(1d3-1)*2889+(1d3-1)*963+(1d3-1)*321+(1d3-1)*107+1d100+1d8+598")]
        [TestCase(600, 90210, "905d100+1d12+1d4+1d2-308")]
        [TestCase(700, 4200, "(1d3-1)*1167+(1d3-1)*389+3d100+4d20+1d12+1d4+1d2+690")]
        [TestCase(783, 783, "783")]
        [TestCase(783, 1336, "(1d2-1)*277+2d100+4d20+1d3+776")]
        [TestCase(783, 1337, "(1d3-1)*185+1d100+4d20+1d10+777")]
        [TestCase(783, 8245, "75d100+1d20+1d12+1d8+705")]
        [TestCase(783, 9266, "(1d12-1)*707+7d100+1d12+1d3+774")]
        [TestCase(783, 90210, "(1d4-1)*22357+225d100+4d20+1d6+553")]
        [TestCase(1000, 4000, "30d100+1d20+1d12+968")]
        [TestCase(1000, 6000, "(1d3-1)*1667+16d100+4d20+1d6+1d2+978")]
        [TestCase(1000, 8000, "70d100+3d20+1d12+1d3+925")]
        [TestCase(1000, 10_000, "90d100+4d20+1d12+1d4+904")]
        [TestCase(1000, 12_000, "(1d3-1)*3667+37d100+1d4+962")]
        [TestCase(1336, 1336, "1336")]
        [TestCase(1336, 1337, "1d2+1335")]
        [TestCase(1336, 8245, "(1d10-1)*691+6d100+5d20+1d2+1324")]
        [TestCase(1336, 9266, "80d100+1d10+1d2+1254")]
        [TestCase(1336, 90210, "(1d3-1)*29625+(1d3-1)*9875+99d100+3d20+1d12+1d6+1232")]
        [TestCase(1337, 1337, "1337")]
        [TestCase(1337, 8245, "(1d3-1)*2303+23d100+1d20+1d6+1d2+1311")]
        [TestCase(1337, 9266, "(1d10-1)*793+8d100+1329")]
        [TestCase(1337, 90210, "(1d2-1)*44437+448d100+4d20+1d8+1d2+883")]
        [TestCase(2000, 8000, "60d100+3d20+1d4+1936")]
        [TestCase(2000, 12_000, "101d100+1d2+1898")]
        [TestCase(2000, 16_000, "(1d3-1)*4667+47d100+1d12+1d3+1951")]
        [TestCase(2000, 20_000, "181d100+4d20+1d6+1814")]
        [TestCase(2000, 24_000, "222d100+1d20+1d4+1776")]
        [TestCase(3000, 12_000, "90d100+4d20+1d12+1d4+2904")]
        [TestCase(3000, 18_000, "151d100+2d20+1d12+1d3+2845")]
        [TestCase(3000, 24_000, "212d100+1d12+1d2+2786")]
        [TestCase(3000, 30_000, "272d100+3d20+1d12+1d4+1d2+2722")]
        [TestCase(3000, 36_000, "333d100+1d20+1d12+1d4+2664")]
        [TestCase(4000, 16_000, "121d100+1d20+1d3+3877")]
        [TestCase(4000, 24_000, "(1d3-1)*6667+67d100+1d20+1d12+1d4+3930")]
        [TestCase(4000, 32_000, "282d100+4d20+1d6+1d2+3712")]
        [TestCase(4000, 40_000, "363d100+3d20+1d6+1d2+3632")]
        [TestCase(4000, 48_000, "(1d3-1)*14667+(1d3-1)*4889+49d100+1d20+1d12+1d8+3948")]
        [TestCase(5000, 20_000, "151d100+2d20+1d12+1d3+4845")]
        [TestCase(5000, 30_000, "252d100+2d20+1d12+1d4+4744")]
        [TestCase(5000, 40_000, "(1d3-1)*11667+(1d3-1)*3889+39d100+1d20+1d8+1d2+4958")]
        [TestCase(5000, 50_000, "454d100+2d20+1d12+1d6+4542")]
        [TestCase(5000, 60_000, "555d100+2d20+1d12+1d6+1d2+4440")]
        [TestCase(6000, 24_000, "181d100+4d20+1d6+5814")]
        [TestCase(6000, 36_000, "303d100+1d4+5696")]
        [TestCase(6000, 48_000, "424d100+1d20+1d6+5574")]
        [TestCase(6000, 60_000, "545d100+2d20+1d8+5452")]
        [TestCase(6000, 72_000, "666d100+3d20+1d10+5330")]
        [TestCase(7000, 28_000, "212d100+1d12+1d2+6786")]
        [TestCase(7000, 42_000, "(1d3-1)*11667+(1d3-1)*3889+39d100+1d20+1d8+1d2+6958")]
        [TestCase(7000, 56_000, "494d100+4d20+1d12+1d8+6500")]
        [TestCase(7000, 70_000, "636d100+1d20+1d12+1d6+1d2+6360")]
        [TestCase(7000, 84_000, "(1d3-1)*25667+259d100+1d20+1d6+1d2+6738")]
        [TestCase(8245, 8245, "8245")]
        [TestCase(8245, 9266, "(1d2-1)*511+5d100+1d12+1d4+1d2+8237")]
        [TestCase(8245, 90210, "(1d6-1)*13661+137d100+5d20+1d3+8102")]
        [TestCase(9266, 9266, "9266")]
        [TestCase(9266, 90210, "817d100+3d20+1d4+1d2+8444")]
        [TestCase(10_000, 40_000, "303d100+1d4+9696")]
        [TestCase(10_000, 60_000, "(1d3-1)*16667+168d100+1d20+1d12+1d4+1d2+9828")]
        [TestCase(10_000, 80_000, "707d100+1d8+9292")]
        [TestCase(10_000, 100_000, "909d100+1d10+9090")]
        [TestCase(10_000, 120_000, "(1d3-1)*36667+370d100+1d20+1d12+1d6+1d2+9626")]
        [TestCase(20_000, 80_000, "606d100+1d6+1d2+19392")]
        [TestCase(20_000, 120_000, "1010d100+1d10+1d2+18988")]
        [TestCase(20_000, 160_000, "(1d3-1)*46667+471d100+1d20+1d12+1d8+19526")]
        [TestCase(20_000, 200_000, "1818d100+1d12+1d8+18180")]
        [TestCase(20_000, 240_000, "2222d100+1d20+1d4+17776")]
        [TestCase(30_000, 120_000, "909d100+1d10+29090")]
        [TestCase(30_000, 180_000, "1515d100+1d12+1d4+1d2+28482")]
        [TestCase(30_000, 240_000, "2121d100+1d20+1d3+27877")]
        [TestCase(30_000, 300_000, "2727d100+1d20+1d8+1d2+27270")]
        [TestCase(30_000, 360_000, "3333d100+1d20+1d12+1d4+26664")]
        [TestCase(40_000, 160_000, "1212d100+1d12+1d2+38786")]
        [TestCase(40_000, 240_000, "(1d3-1)*66667+673d100+2d20+1d2+39324")]
        [TestCase(40_000, 320_000, "2828d100+1d20+1d10+37170")]
        [TestCase(40_000, 400_000, "3636d100+1d20+1d12+1d6+1d2+36360")]
        [TestCase(40_000, 480_000, "(1d3-1)*146667+(1d3-1)*48889+493d100+4d20+1d6+39502")]
        [TestCase(50_000, 200_000, "1515d100+1d12+1d4+1d2+48482")]
        [TestCase(50_000, 300_000, "2525d100+1d20+1d6+1d2+47472")]
        [TestCase(50_000, 400_000, "(1d3-1)*116667+(1d3-1)*38889+(1d3-1)*12963+(1d3-1)*4321+43d100+3d20+1d6+1d2+49952")]
        [TestCase(50_000, 500_000, "4545d100+2d20+1d8+45452")]
        [TestCase(50_000, 600_000, "5555d100+2d20+1d12+1d6+1d2+44440")]
        [TestCase(60_000, 240_000, "1818d100+1d12+1d8+58180")]
        [TestCase(60_000, 360_000, "3030d100+1d20+1d12+56968")]
        [TestCase(60_000, 480_000, "4242d100+2d20+1d4+1d2+55754")]
        [TestCase(60_000, 600_000, "5454d100+2d20+1d12+1d6+54542")]
        [TestCase(60_000, 720_000, "6666d100+3d20+1d10+53330")]
        [TestCase(70_000, 280_000, "2121d100+1d20+1d3+67877")]
        [TestCase(70_000, 420_000, "(1d3-1)*116667+(1d3-1)*38889+(1d3-1)*12963+(1d3-1)*4321+43d100+3d20+1d6+1d2+69952")]
        [TestCase(70_000, 560_000, "4949d100+2d20+1d12+65048")]
        [TestCase(70_000, 700_000, "6363d100+3d20+1d6+1d2+63632")]
        [TestCase(70_000, 840_000, "(1d3-1)*256667+2592d100+3d20+1d2+67404")]
        [TestCase(90_210, 90_210, "90210")]
        public void GetRollWithMostEvenDistribution_AllowMultipliers(int lower, int upper, string expectedRoll)
        {
            stopwatch.Start();
            var roll = RollHelper.GetRollWithMostEvenDistribution(lower, upper, true);
            stopwatch.Stop();

            Assert.That(roll, Is.EqualTo(expectedRoll), $"[{lower},{upper}]");
            Assert.That(stopwatch.Elapsed, Is.LessThan(TimeSpan.FromSeconds(1)), $"[{lower},{upper}]");
        }

        [TestCase(1, 2, 2, "1")]
        [TestCase(5, 6, 50, "(1d3-1)*15+(1d3-1)*5+1d4+1d2-1")]
        [TestCase(6, 7, 9, "1d3")]
        [TestCase(6, 8, 10, "1d3+1")]
        [TestCase(6, 10, 18, "(1d3-1)*3+1d3+3")]
        [TestCase(9, 14, 27, "(1d2-1)*7+1d6+1d2+3")]
        [TestCase(9, 15, 27, "1d12+1d2+4")]
        [TestCase(12, 19, 36, "(1d6-1)*3+1d3+6")]
        [TestCase(15, 22, 45, "(1d12-1)*2+1d2+6")]
        public void GetRollWithMostEvenDistribution_AllowMultipliers_WithBaseAmount(int baseAmount, int lower, int upper, string expectedRoll)
        {
            stopwatch.Start();
            var roll = RollHelper.GetRollWithMostEvenDistribution(baseAmount, lower, upper, true);
            stopwatch.Stop();

            Assert.That(roll, Is.EqualTo(expectedRoll), $"[{lower},{upper}]");
            Assert.That(stopwatch.Elapsed, Is.LessThan(TimeSpan.FromSeconds(1)), $"[{lower},{upper}]");
        }

        [TestCase(-2, -2, "-2")]
        [TestCase(-2, -1, "1d2-3")]
        [TestCase(-2, 0, "1d3-3")]
        [TestCase(-2, 2, "1d5-3")]
        [TestCase(-2, 3, "1d6-3")]
        [TestCase(-1, -1, "-1")]
        [TestCase(-1, 0, "1d2-2")]
        [TestCase(-1, 1, "1d3-2")]
        [TestCase(-1, 3, "1d5-2")]
        [TestCase(-1, 4, "1d6-2")]
        [TestCase(0, 0, "0")]
        [TestCase(0, 1, "1d2-1")]
        [TestCase(0, 2, "1d3-1")]
        [TestCase(0, 4, "1d5-1")]
        [TestCase(0, 5, "1d6-1")]
        [TestCase(1, 1, "1")]
        [TestCase(1, 2, "1d2")]
        [TestCase(1, 3, "1d3")]
        [TestCase(1, 4, "1d4")]
        [TestCase(1, 5, "1d5")]
        [TestCase(1, 6, "1d6")]
        [TestCase(1, 7, "1d7")]
        [TestCase(1, 8, "1d8")]
        [TestCase(1, 9, "1d9")]
        [TestCase(1, 10, "1d10")]
        [TestCase(1, 11, "1d11")]
        [TestCase(1, 12, "1d12")]
        [TestCase(1, 20, "1d20")]
        [TestCase(1, 33, "1d33")]
        [TestCase(1, 36, "1d36")]
        [TestCase(1, 45, "1d45")]
        [TestCase(1, 48, "1d48")]
        [TestCase(1, 52, "1d52")]
        [TestCase(1, 100, "1d100")]
        [TestCase(1, 103, "1d103")]
        [TestCase(1, 1000, "1d1000")]
        [TestCase(1, 10_000, "1d10000")]
        [TestCase(1, 100_000, "10d10000+1d10-10")]
        [TestCase(1, 1_000_000, "100d10000+1d100-100")]
        [TestCase(2, 2, "2")]
        [TestCase(2, 3, "1d2+1")]
        [TestCase(2, 4, "1d3+1")]
        [TestCase(2, 5, "1d4+1")]
        [TestCase(2, 6, "1d5+1")]
        [TestCase(2, 7, "1d6+1")]
        [TestCase(2, 8, "1d7+1")]
        [TestCase(2, 10, "1d9+1")]
        [TestCase(2, 12, "1d11+1")]
        [TestCase(2, 13, "1d12+1")]
        [TestCase(2, 15, "1d14+1")]
        [TestCase(2, 20, "1d19+1")]
        [TestCase(2, 24, "1d23+1")]
        [TestCase(2, 40, "1d39+1")]
        [TestCase(2, 200, "1d199+1")]
        [TestCase(3, 3, "3")]
        [TestCase(3, 4, "1d2+2")]
        [TestCase(3, 5, "1d3+2")]
        [TestCase(3, 6, "1d4+2")]
        [TestCase(3, 8, "1d6+2")]
        [TestCase(3, 9, "1d7+2")]
        [TestCase(3, 10, "1d8+2")]
        [TestCase(3, 12, "1d10+2")]
        [TestCase(3, 13, "1d11+2")]
        [TestCase(3, 18, "1d16+2")]
        [TestCase(3, 20, "1d18+2")]
        [TestCase(3, 24, "1d22+2")]
        [TestCase(3, 28, "1d26+2")]
        [TestCase(3, 30, "1d28+2")]
        [TestCase(3, 36, "1d34+2")]
        [TestCase(4, 4, "4")]
        [TestCase(4, 5, "1d2+3")]
        [TestCase(4, 6, "1d3+3")]
        [TestCase(4, 7, "1d4+3")]
        [TestCase(4, 8, "1d5+3")]
        [TestCase(4, 9, "1d6+3")]
        [TestCase(4, 10, "1d7+3")]
        [TestCase(4, 12, "1d9+3")]
        [TestCase(4, 16, "1d13+3")]
        [TestCase(4, 24, "1d21+3")]
        [TestCase(4, 32, "1d29+3")]
        [TestCase(4, 40, "1d37+3")]
        [TestCase(4, 48, "1d45+3")]
        [TestCase(5, 5, "5")]
        [TestCase(5, 8, "1d4+4")]
        [TestCase(5, 9, "1d5+4")]
        [TestCase(5, 10, "1d6+4")]
        [TestCase(5, 12, "1d8+4")]
        [TestCase(5, 13, "1d9+4")]
        [TestCase(5, 14, "1d10+4")]
        [TestCase(5, 16, "1d12+4")]
        [TestCase(5, 18, "1d14+4")]
        [TestCase(5, 20, "1d16+4")]
        [TestCase(5, 30, "1d26+4")]
        [TestCase(5, 40, "1d36+4")]
        [TestCase(5, 50, "1d46+4")]
        [TestCase(5, 60, "1d56+4")]
        [TestCase(6, 6, "6")]
        [TestCase(6, 7, "1d2+5")]
        [TestCase(6, 8, "1d3+5")]
        [TestCase(6, 9, "1d4+5")]
        [TestCase(6, 10, "1d5+5")]
        [TestCase(6, 11, "1d6+5")]
        [TestCase(6, 13, "1d8+5")]
        [TestCase(6, 15, "1d10+5")]
        [TestCase(6, 18, "1d13+5")]
        [TestCase(6, 20, "1d15+5")]
        [TestCase(6, 24, "1d19+5")]
        [TestCase(6, 30, "1d25+5")]
        [TestCase(6, 36, "1d31+5")]
        [TestCase(6, 45, "1d40+5")]
        [TestCase(7, 7, "7")]
        [TestCase(7, 10, "1d4+6")]
        [TestCase(7, 11, "1d5+6")]
        [TestCase(7, 12, "1d6+6")]
        [TestCase(7, 16, "1d10+6")]
        [TestCase(7, 18, "1d12+6")]
        [TestCase(7, 30, "1d24+6")]
        [TestCase(7, 42, "1d36+6")]
        [TestCase(7, 50, "1d44+6")]
        [TestCase(8, 8, "8")]
        [TestCase(8, 9, "1d2+7")]
        [TestCase(8, 16, "1d9+7")]
        [TestCase(8, 18, "1d11+7")]
        [TestCase(9, 9, "9")]
        [TestCase(9, 14, "1d6+8")]
        [TestCase(9, 16, "1d8+8")]
        [TestCase(9, 30, "1d22+8")]
        [TestCase(10, 10, "10")]
        [TestCase(10, 11, "1d2+9")]
        [TestCase(10, 20, "1d11+9")]
        [TestCase(10, 24, "1d15+9")]
        [TestCase(10, 40, "1d31+9")]
        [TestCase(10, 50, "1d41+9")]
        [TestCase(10, 60, "1d51+9")]
        [TestCase(10, 80, "1d71+9")]
        [TestCase(10, 100, "1d91+9")]
        [TestCase(10, 120, "1d111+9")]
        [TestCase(11, 11, "11")]
        [TestCase(11, 20, "1d10+10")]
        [TestCase(11, 40, "1d30+10")]
        [TestCase(12, 12, "12")]
        [TestCase(12, 13, "1d2+11")]
        [TestCase(12, 22, "1d11+11")]
        [TestCase(12, 24, "1d13+11")]
        [TestCase(12, 30, "1d19+11")]
        [TestCase(13, 13, "13")]
        [TestCase(14, 14, "14")]
        [TestCase(14, 15, "1d2+13")]
        [TestCase(15, 15, "15")]
        [TestCase(15, 30, "1d16+14")]
        [TestCase(15, 50, "1d36+14")]
        [TestCase(15, 150, "1d136+14")]
        [TestCase(16, 16, "16")]
        [TestCase(16, 17, "1d2+15")]
        [TestCase(17, 17, "17")]
        [TestCase(18, 18, "18")]
        [TestCase(18, 19, "1d2+17")]
        [TestCase(18, 72, "1d55+17")]
        [TestCase(19, 19, "19")]
        [TestCase(20, 20, "20")]
        [TestCase(20, 50, "1d31+19")]
        [TestCase(20, 80, "1d61+19")]
        [TestCase(20, 150, "1d131+19")]
        [TestCase(20, 160, "1d141+19")]
        [TestCase(20, 200, "1d181+19")]
        [TestCase(20, 240, "1d221+19")]
        [TestCase(21, 30, "1d10+20")]
        [TestCase(21, 40, "1d20+20")]
        [TestCase(30, 50, "1d21+29")]
        [TestCase(30, 60, "1d31+29")]
        [TestCase(30, 100, "1d71+29")]
        [TestCase(30, 120, "1d91+29")]
        [TestCase(30, 180, "1d151+29")]
        [TestCase(30, 240, "1d211+29")]
        [TestCase(30, 300, "1d271+29")]
        [TestCase(30, 360, "1d331+29")]
        [TestCase(40, 160, "1d121+39")]
        [TestCase(40, 240, "1d201+39")]
        [TestCase(40, 320, "1d281+39")]
        [TestCase(40, 400, "1d361+39")]
        [TestCase(40, 480, "1d441+39")]
        [TestCase(42, 42, "42")]
        [TestCase(42, 96, "1d55+41")]
        [TestCase(42, 600, "1d559+41")]
        [TestCase(42, 783, "1d742+41")]
        [TestCase(42, 1336, "1d1295+41")]
        [TestCase(42, 1337, "1d1296+41")]
        [TestCase(42, 8245, "1d8204+41")]
        [TestCase(42, 9266, "1d9225+41")]
        [TestCase(42, 90210, "9d10000+1d178+32")]
        [TestCase(45, 150, "1d106+44")]
        [TestCase(50, 200, "1d151+49")]
        [TestCase(50, 300, "1d251+49")]
        [TestCase(60, 240, "1d181+59")]
        [TestCase(60, 360, "1d301+59")]
        [TestCase(70, 160, "1d91+69")]
        [TestCase(70, 420, "1d351+69")]
        [TestCase(96, 96, "96")]
        [TestCase(96, 600, "1d505+95")]
        [TestCase(96, 783, "1d688+95")]
        [TestCase(96, 1336, "1d1241+95")]
        [TestCase(96, 1337, "1d1242+95")]
        [TestCase(96, 8245, "1d8150+95")]
        [TestCase(96, 9266, "1d9171+95")]
        [TestCase(96, 90210, "9d10000+1d124+86")]
        [TestCase(100, 400, "1d301+99")]
        [TestCase(100, 600, "1d501+99")]
        [TestCase(100, 800, "1d701+99")]
        [TestCase(100, 1000, "1d901+99")]
        [TestCase(100, 1200, "1d1101+99")]
        [TestCase(200, 800, "1d601+199")]
        [TestCase(200, 1200, "1d1001+199")]
        [TestCase(200, 1600, "1d1401+199")]
        [TestCase(200, 2000, "1d1801+199")]
        [TestCase(300, 1200, "1d901+299")]
        [TestCase(300, 1800, "1d1501+299")]
        [TestCase(300, 2400, "1d2101+299")]
        [TestCase(300, 3000, "1d2701+299")]
        [TestCase(300, 3600, "1d3301+299")]
        [TestCase(400, 1600, "1d1201+399")]
        [TestCase(400, 2400, "1d2001+399")]
        [TestCase(400, 3200, "1d2801+399")]
        [TestCase(400, 4000, "1d3601+399")]
        [TestCase(400, 4800, "1d4401+399")]
        [TestCase(437, 1204, "1d768+436")]
        [TestCase(500, 2000, "1d1501+499")]
        [TestCase(500, 3000, "1d2501+499")]
        [TestCase(600, 600, "600")]
        [TestCase(600, 783, "1d184+599")]
        [TestCase(600, 1336, "1d737+599")]
        [TestCase(600, 1337, "1d738+599")]
        [TestCase(600, 2400, "1d1801+599")]
        [TestCase(600, 3600, "1d3001+599")]
        [TestCase(600, 8245, "1d7646+599")]
        [TestCase(600, 9266, "1d8667+599")]
        [TestCase(600, 90210, "8d10000+1d9619+591")]
        [TestCase(700, 4200, "1d3501+699")]
        [TestCase(783, 783, "783")]
        [TestCase(783, 1336, "1d554+782")]
        [TestCase(783, 1337, "1d555+782")]
        [TestCase(783, 8245, "1d7463+782")]
        [TestCase(783, 9266, "1d8484+782")]
        [TestCase(783, 90210, "8d10000+1d9436+774")]
        [TestCase(1000, 4000, "1d3001+999")]
        [TestCase(1000, 6000, "1d5001+999")]
        [TestCase(1000, 8000, "1d7001+999")]
        [TestCase(1000, 10_000, "1d9001+999")]
        [TestCase(1000, 12_000, "1d10000+1d1002+998")]
        [TestCase(1336, 1336, "1336")]
        [TestCase(1336, 1337, "1d2+1335")]
        [TestCase(1336, 8245, "1d6910+1335")]
        [TestCase(1336, 9266, "1d7931+1335")]
        [TestCase(1336, 90210, "8d10000+1d8883+1327")]
        [TestCase(1337, 1337, "1337")]
        [TestCase(1337, 8245, "1d6909+1336")]
        [TestCase(1337, 9266, "1d7930+1336")]
        [TestCase(1337, 90210, "8d10000+1d8882+1328")]
        [TestCase(2000, 8000, "1d6001+1999")]
        [TestCase(2000, 12_000, "1d10000+1d2+1998")]
        [TestCase(2000, 16_000, "1d10000+1d4002+1998")]
        [TestCase(2000, 20_000, "1d10000+1d8002+1998")]
        [TestCase(2000, 24_000, "2d10000+1d2003+1997")]
        [TestCase(3000, 12_000, "1d9001+2999")]
        [TestCase(3000, 18_000, "1d10000+1d5002+2998")]
        [TestCase(3000, 24_000, "2d10000+1d1003+2997")]
        [TestCase(3000, 30_000, "2d10000+1d7003+2997")]
        [TestCase(3000, 36_000, "3d10000+1d3004+2996")]
        [TestCase(4000, 16_000, "1d10000+1d2002+3998")]
        [TestCase(4000, 24_000, "2d10000+1d3+3997")]
        [TestCase(4000, 32_000, "2d10000+1d8003+3997")]
        [TestCase(4000, 40_000, "3d10000+1d6004+3996")]
        [TestCase(4000, 48_000, "4d10000+1d4005+3995")]
        [TestCase(5000, 20_000, "1d10000+1d5002+4998")]
        [TestCase(5000, 30_000, "2d10000+1d5003+4997")]
        [TestCase(5000, 40_000, "3d10000+1d5004+4996")]
        [TestCase(5000, 50_000, "4d10000+1d5005+4995")]
        [TestCase(5000, 60_000, "5d10000+1d5006+4994")]
        [TestCase(6000, 24_000, "1d10000+1d8002+5998")]
        [TestCase(6000, 36_000, "3d10000+1d4+5996")]
        [TestCase(6000, 48_000, "4d10000+1d2005+5995")]
        [TestCase(6000, 60_000, "5d10000+1d4006+5994")]
        [TestCase(6000, 72_000, "6d10000+1d6007+5993")]
        [TestCase(7000, 28_000, "2d10000+1d1003+6997")]
        [TestCase(7000, 42_000, "3d10000+1d5004+6996")]
        [TestCase(7000, 56_000, "4d10000+1d9005+6995")]
        [TestCase(7000, 70_000, "6d10000+1d3007+6993")]
        [TestCase(7000, 84_000, "7d10000+1d7008+6992")]
        [TestCase(8245, 8245, "8245")]
        [TestCase(8245, 9266, "1d1022+8244")]
        [TestCase(8245, 90210, "8d10000+1d1974+8236")]
        [TestCase(9266, 9266, "9266")]
        [TestCase(9266, 90210, "8d10000+1d953+9257")]
        [TestCase(10_000, 40_000, "3d10000+1d4+9996")]
        [TestCase(10_000, 60_000, "5d10000+1d6+9994")]
        [TestCase(10_000, 80_000, "7d10000+1d8+9992")]
        [TestCase(10_000, 100_000, "9d10000+1d10+9990")]
        [TestCase(10_000, 120_000, "11d10000+1d12+9988")]
        [TestCase(20_000, 80_000, "6d10000+1d7+19993")]
        [TestCase(20_000, 120_000, "10d10000+1d11+19989")]
        [TestCase(20_000, 160_000, "14d10000+1d15+19985")]
        [TestCase(20_000, 200_000, "18d10000+1d19+19981")]
        [TestCase(20_000, 240_000, "22d10000+1d23+19977")]
        [TestCase(30_000, 120_000, "9d10000+1d10+29990")]
        [TestCase(30_000, 180_000, "15d10000+1d16+29984")]
        [TestCase(30_000, 240_000, "21d10000+1d22+29978")]
        [TestCase(30_000, 300_000, "27d10000+1d28+29972")]
        [TestCase(30_000, 360_000, "33d10000+1d34+29966")]
        [TestCase(40_000, 160_000, "12d10000+1d13+39987")]
        [TestCase(40_000, 240_000, "20d10000+1d21+39979")]
        [TestCase(40_000, 320_000, "28d10000+1d29+39971")]
        [TestCase(40_000, 400_000, "36d10000+1d37+39963")]
        [TestCase(40_000, 480_000, "44d10000+1d45+39955")]
        [TestCase(50_000, 200_000, "15d10000+1d16+49984")]
        [TestCase(50_000, 300_000, "25d10000+1d26+49974")]
        [TestCase(50_000, 400_000, "35d10000+1d36+49964")]
        [TestCase(50_000, 500_000, "45d10000+1d46+49954")]
        [TestCase(50_000, 600_000, "55d10000+1d56+49944")]
        [TestCase(60_000, 240_000, "18d10000+1d19+59981")]
        [TestCase(60_000, 360_000, "30d10000+1d31+59969")]
        [TestCase(60_000, 480_000, "42d10000+1d43+59957")]
        [TestCase(60_000, 600_000, "54d10000+1d55+59945")]
        [TestCase(60_000, 720_000, "66d10000+1d67+59933")]
        [TestCase(70_000, 280_000, "21d10000+1d22+69978")]
        [TestCase(70_000, 420_000, "35d10000+1d36+69964")]
        [TestCase(70_000, 560_000, "49d10000+1d50+69950")]
        [TestCase(70_000, 700_000, "63d10000+1d64+69936")]
        [TestCase(70_000, 840_000, "77d10000+1d78+69922")]
        [TestCase(90_210, 90_210, "90210")]
        public void GetRollWithMostEvenDistribution_AllowNonstandard(int lower, int upper, string expectedRoll)
        {
            stopwatch.Start();
            var roll = RollHelper.GetRollWithMostEvenDistribution(lower, upper, allowNonstandardDice: true);
            stopwatch.Stop();

            Assert.That(roll, Is.EqualTo(expectedRoll), $"[{lower},{upper}]");
            Assert.That(stopwatch.Elapsed, Is.LessThan(TimeSpan.FromSeconds(1)), $"[{lower},{upper}]");
        }

        [TestCase(1, 2, 2, "1")]
        [TestCase(5, 6, 50, "1d45")]
        [TestCase(6, 7, 9, "1d3")]
        [TestCase(6, 8, 10, "1d3+1")]
        [TestCase(6, 10, 18, "1d9+3")]
        [TestCase(9, 14, 27, "1d14+4")]
        [TestCase(9, 15, 27, "1d13+5")]
        [TestCase(12, 19, 36, "1d18+6")]
        [TestCase(15, 22, 45, "1d24+6")]
        public void GetRollWithMostEvenDistribution_WithBaseAmount_AllowNonstandard(int baseAmount, int lower, int upper, string expectedRoll)
        {
            stopwatch.Start();
            var roll = RollHelper.GetRollWithMostEvenDistribution(baseAmount, lower, upper, allowNonstandardDice: true);
            stopwatch.Stop();

            Assert.That(roll, Is.EqualTo(expectedRoll), $"[{lower},{upper}]");
            Assert.That(stopwatch.Elapsed, Is.LessThan(TimeSpan.FromSeconds(1)), $"[{lower},{upper}]");
        }

        [TestCase(-2, -2, "-2")]
        [TestCase(-2, -1, "1d2-3")]
        [TestCase(-2, 0, "1d3-3")]
        [TestCase(-2, 2, "1d5-3")]
        [TestCase(-2, 3, "1d6-3")]
        [TestCase(-1, -1, "-1")]
        [TestCase(-1, 0, "1d2-2")]
        [TestCase(-1, 1, "1d3-2")]
        [TestCase(-1, 3, "1d5-2")]
        [TestCase(-1, 4, "1d6-2")]
        [TestCase(0, 0, "0")]
        [TestCase(0, 1, "1d2-1")]
        [TestCase(0, 2, "1d3-1")]
        [TestCase(0, 4, "1d5-1")]
        [TestCase(0, 5, "1d6-1")]
        [TestCase(1, 1, "1")]
        [TestCase(1, 2, "1d2")]
        [TestCase(1, 3, "1d3")]
        [TestCase(1, 4, "1d4")]
        [TestCase(1, 5, "1d5")]
        [TestCase(1, 6, "1d6")]
        [TestCase(1, 7, "1d7")]
        [TestCase(1, 8, "1d8")]
        [TestCase(1, 9, "(1d3-1)*3+1d3")]
        [TestCase(1, 10, "1d10")]
        [TestCase(1, 11, "1d11")]
        [TestCase(1, 12, "1d12")]
        [TestCase(1, 20, "1d20")]
        [TestCase(1, 33, "(1d3-1)*11+1d11")]
        [TestCase(1, 36, "(1d12-1)*3+1d3")]
        [TestCase(1, 45, "(1d3-1)*15+(1d3-1)*5+1d5")]
        [TestCase(1, 48, "(1d12-1)*4+1d4")]
        [TestCase(1, 52, "(1d4-1)*13+1d13")]
        [TestCase(1, 100, "1d100")]
        [TestCase(1, 103, "1d103")]
        [TestCase(1, 1000, "(1d100-1)*10+1d10")]
        [TestCase(1, 10_000, "(1d100-1)*100+1d100")]
        [TestCase(1, 100_000, "(1d100-1)*1000+(1d100-1)*10+1d10")]
        [TestCase(1, 1_000_000, "(1d100-1)*10000+(1d100-1)*100+1d100")]
        [TestCase(2, 2, "2")]
        [TestCase(2, 3, "1d2+1")]
        [TestCase(2, 4, "1d3+1")]
        [TestCase(2, 5, "1d4+1")]
        [TestCase(2, 6, "1d5+1")]
        [TestCase(2, 7, "1d6+1")]
        [TestCase(2, 8, "1d7+1")]
        [TestCase(2, 10, "(1d3-1)*3+1d3+1")]
        [TestCase(2, 12, "1d11+1")]
        [TestCase(2, 13, "1d12+1")]
        [TestCase(2, 15, "(1d2-1)*7+1d7+1")]
        [TestCase(2, 20, "1d19+1")]
        [TestCase(2, 24, "1d23+1")]
        [TestCase(2, 40, "(1d3-1)*13+1d13+1")]
        [TestCase(2, 200, "1d199+1")]
        [TestCase(3, 3, "3")]
        [TestCase(3, 4, "1d2+2")]
        [TestCase(3, 5, "1d3+2")]
        [TestCase(3, 6, "1d4+2")]
        [TestCase(3, 8, "1d6+2")]
        [TestCase(3, 9, "1d7+2")]
        [TestCase(3, 10, "1d8+2")]
        [TestCase(3, 12, "1d10+2")]
        [TestCase(3, 13, "1d11+2")]
        [TestCase(3, 18, "(1d8-1)*2+1d2+2")]
        [TestCase(3, 20, "(1d6-1)*3+1d3+2")]
        [TestCase(3, 24, "(1d2-1)*11+1d11+2")]
        [TestCase(3, 28, "(1d2-1)*13+1d13+2")]
        [TestCase(3, 30, "(1d4-1)*7+1d7+2")]
        [TestCase(3, 36, "(1d2-1)*17+1d17+2")]
        [TestCase(4, 4, "4")]
        [TestCase(4, 5, "1d2+3")]
        [TestCase(4, 6, "1d3+3")]
        [TestCase(4, 7, "1d4+3")]
        [TestCase(4, 8, "1d5+3")]
        [TestCase(4, 9, "1d6+3")]
        [TestCase(4, 10, "1d7+3")]
        [TestCase(4, 12, "(1d3-1)*3+1d3+3")]
        [TestCase(4, 16, "1d13+3")]
        [TestCase(4, 24, "(1d3-1)*7+1d7+3")]
        [TestCase(4, 32, "1d29+3")]
        [TestCase(4, 40, "1d37+3")]
        [TestCase(4, 48, "(1d3-1)*15+(1d3-1)*5+1d5+3")]
        [TestCase(5, 5, "5")]
        [TestCase(5, 8, "1d4+4")]
        [TestCase(5, 9, "1d5+4")]
        [TestCase(5, 10, "1d6+4")]
        [TestCase(5, 12, "1d8+4")]
        [TestCase(5, 13, "(1d3-1)*3+1d3+4")]
        [TestCase(5, 14, "1d10+4")]
        [TestCase(5, 16, "1d12+4")]
        [TestCase(5, 18, "(1d2-1)*7+1d7+4")]
        [TestCase(5, 20, "(1d8-1)*2+1d2+4")]
        [TestCase(5, 30, "(1d2-1)*13+1d13+4")]
        [TestCase(5, 40, "(1d12-1)*3+1d3+4")]
        [TestCase(5, 50, "(1d2-1)*23+1d23+4")]
        [TestCase(5, 60, "(1d8-1)*7+1d7+4")]
        [TestCase(6, 6, "6")]
        [TestCase(6, 7, "1d2+5")]
        [TestCase(6, 8, "1d3+5")]
        [TestCase(6, 9, "1d4+5")]
        [TestCase(6, 10, "1d5+5")]
        [TestCase(6, 11, "1d6+5")]
        [TestCase(6, 13, "1d8+5")]
        [TestCase(6, 15, "1d10+5")]
        [TestCase(6, 18, "1d13+5")]
        [TestCase(6, 20, "(1d3-1)*5+1d5+5")]
        [TestCase(6, 24, "1d19+5")]
        [TestCase(6, 30, "1d25+5")]
        [TestCase(6, 36, "1d31+5")]
        [TestCase(6, 45, "(1d20-1)*2+1d2+5")]
        [TestCase(7, 7, "7")]
        [TestCase(7, 10, "1d4+6")]
        [TestCase(7, 11, "1d5+6")]
        [TestCase(7, 12, "1d6+6")]
        [TestCase(7, 16, "1d10+6")]
        [TestCase(7, 18, "1d12+6")]
        [TestCase(7, 30, "(1d12-1)*2+1d2+6")]
        [TestCase(7, 42, "(1d12-1)*3+1d3+6")]
        [TestCase(7, 50, "(1d4-1)*11+1d11+6")]
        [TestCase(8, 8, "8")]
        [TestCase(8, 9, "1d2+7")]
        [TestCase(8, 18, "1d11+7")]
        [TestCase(8, 16, "(1d3-1)*3+1d3+7")]
        [TestCase(9, 9, "9")]
        [TestCase(9, 14, "1d6+8")]
        [TestCase(9, 16, "1d8+8")]
        [TestCase(9, 30, "(1d2-1)*11+1d11+8")]
        [TestCase(10, 10, "10")]
        [TestCase(10, 11, "1d2+9")]
        [TestCase(10, 20, "1d11+9")]
        [TestCase(10, 24, "(1d3-1)*5+1d5+9")]
        [TestCase(10, 40, "1d31+9")]
        [TestCase(10, 50, "1d41+9")]
        [TestCase(10, 60, "(1d3-1)*17+1d17+9")]
        [TestCase(10, 80, "1d71+9")]
        [TestCase(10, 100, "1d91+9")]
        [TestCase(10, 120, "(1d3-1)*37+1d37+9")]
        [TestCase(11, 11, "11")]
        [TestCase(11, 20, "1d10+10")]
        [TestCase(11, 40, "(1d10-1)*3+1d3+10")]
        [TestCase(12, 12, "12")]
        [TestCase(12, 13, "1d2+11")]
        [TestCase(12, 22, "1d11+11")]
        [TestCase(12, 24, "1d13+11")]
        [TestCase(12, 30, "1d19+11")]
        [TestCase(13, 13, "13")]
        [TestCase(14, 14, "14")]
        [TestCase(14, 15, "1d2+13")]
        [TestCase(15, 15, "15")]
        [TestCase(15, 30, "(1d8-1)*2+1d2+14")]
        [TestCase(15, 50, "(1d12-1)*3+1d3+14")]
        [TestCase(15, 150, "(1d8-1)*17+1d17+14")]
        [TestCase(16, 16, "16")]
        [TestCase(16, 17, "1d2+15")]
        [TestCase(17, 17, "17")]
        [TestCase(18, 18, "18")]
        [TestCase(18, 19, "1d2+17")]
        [TestCase(18, 72, "1d55+17")]
        [TestCase(19, 19, "19")]
        [TestCase(20, 20, "20")]
        [TestCase(20, 50, "1d31+19")]
        [TestCase(20, 80, "1d61+19")]
        [TestCase(20, 150, "1d131+19")]
        [TestCase(20, 160, "(1d3-1)*47+1d47+19")]
        [TestCase(20, 200, "1d181+19")]
        [TestCase(20, 240, "1d221+19")]
        [TestCase(21, 30, "1d10+20")]
        [TestCase(21, 40, "1d20+20")]
        [TestCase(30, 50, "(1d3-1)*7+1d7+29")]
        [TestCase(30, 60, "1d31+29")]
        [TestCase(30, 100, "1d71+29")]
        [TestCase(30, 120, "1d91+29")]
        [TestCase(30, 180, "1d151+29")]
        [TestCase(30, 240, "1d211+29")]
        [TestCase(30, 300, "1d271+29")]
        [TestCase(30, 360, "1d331+29")]
        [TestCase(40, 160, "1d121+39")]
        [TestCase(40, 240, "(1d3-1)*67+1d67+39")]
        [TestCase(40, 320, "1d281+39")]
        [TestCase(40, 400, "1d361+39")]
        [TestCase(40, 480, "(1d3-1)*147+(1d3-1)*49+1d49+39")]
        [TestCase(42, 42, "42")]
        [TestCase(42, 96, "1d55+41")]
        [TestCase(42, 600, "1d559+41")]
        [TestCase(42, 783, "(1d2-1)*371+1d371+41")]
        [TestCase(42, 1336, "1d1295+41")]
        [TestCase(42, 1337, "(1d12-1)*108+(1d12-1)*9+(1d3-1)*3+1d3+41")]
        [TestCase(42, 8245, "(1d4-1)*2051+1d2051+41")]
        [TestCase(42, 9266, "(1d3-1)*3075+(1d3-1)*1025+1d1025+41")]
        [TestCase(42, 90210, "9d10000+1d178+32")]
        [TestCase(45, 150, "(1d2-1)*53+1d53+44")]
        [TestCase(50, 200, "1d151+49")]
        [TestCase(50, 300, "1d251+49")]
        [TestCase(60, 240, "1d181+59")]
        [TestCase(60, 360, "1d301+59")]
        [TestCase(70, 160, "1d91+69")]
        [TestCase(70, 420, "(1d3-1)*117+(1d3-1)*39+(1d3-1)*13+1d13+69")]
        [TestCase(96, 96, "96")]
        [TestCase(96, 600, "1d505+95")]
        [TestCase(96, 783, "(1d8-1)*86+(1d2-1)*43+1d43+95")]
        [TestCase(96, 1336, "1d1241+95")]
        [TestCase(96, 1337, "(1d6-1)*207+(1d3-1)*69+(1d3-1)*23+1d23+95")]
        [TestCase(96, 8245, "(1d10-1)*815+1d815+95")]
        [TestCase(96, 9266, "(1d3-1)*3057+(1d3-1)*1019+1d1019+95")]
        [TestCase(96, 90210, "9d10000+1d124+86")]
        [TestCase(100, 400, "1d301+99")]
        [TestCase(100, 600, "(1d3-1)*167+1d167+99")]
        [TestCase(100, 800, "1d701+99")]
        [TestCase(100, 1000, "1d901+99")]
        [TestCase(100, 1200, "(1d3-1)*367+1d367+99")]
        [TestCase(200, 800, "1d601+199")]
        [TestCase(200, 1200, "1d1001+199")]
        [TestCase(200, 1600, "(1d3-1)*467+1d467+199")]
        [TestCase(200, 2000, "1d1801+199")]
        [TestCase(300, 1200, "1d901+299")]
        [TestCase(300, 1800, "1d1501+299")]
        [TestCase(300, 2400, "1d2101+299")]
        [TestCase(300, 3000, "1d2701+299")]
        [TestCase(300, 3600, "1d3301+299")]
        [TestCase(400, 1600, "1d1201+399")]
        [TestCase(400, 2400, "(1d3-1)*667+1d667+399")]
        [TestCase(400, 3200, "1d2801+399")]
        [TestCase(400, 4000, "1d3601+399")]
        [TestCase(400, 4800, "(1d3-1)*1467+(1d3-1)*489+(1d3-1)*163+1d163+399")]
        [TestCase(437, 1204, "(1d12-1)*64+(1d8-1)*8+1d8+436")]
        [TestCase(500, 2000, "1d1501+499")]
        [TestCase(500, 3000, "1d2501+499")]
        [TestCase(600, 600, "600")]
        [TestCase(600, 783, "(1d8-1)*23+1d23+599")]
        [TestCase(600, 1336, "1d737+599")]
        [TestCase(600, 1337, "(1d6-1)*123+(1d3-1)*41+1d41+599")]
        [TestCase(600, 2400, "1d1801+599")]
        [TestCase(600, 3600, "1d3001+599")]
        [TestCase(600, 8245, "(1d2-1)*3823+1d3823+599")]
        [TestCase(600, 9266, "(1d3-1)*2889+(1d3-1)*963+(1d3-1)*321+(1d3-1)*107+1d107+599")]
        [TestCase(600, 90210, "8d10000+1d9619+591")]
        [TestCase(700, 4200, "(1d3-1)*1167+(1d3-1)*389+1d389+699")]
        [TestCase(783, 783, "783")]
        [TestCase(783, 1336, "(1d2-1)*277+1d277+782")]
        [TestCase(783, 1337, "(1d3-1)*185+1d185+782")]
        [TestCase(783, 8245, "1d7463+782")]
        [TestCase(783, 9266, "(1d12-1)*707+1d707+782")]
        [TestCase(783, 90210, "(1d4-1)*22357+2d10000+1d2359+780")]
        [TestCase(1000, 4000, "1d3001+999")]
        [TestCase(1000, 6000, "(1d3-1)*1667+1d1667+999")]
        [TestCase(1000, 8000, "1d7001+999")]
        [TestCase(1000, 10_000, "1d9001+999")]
        [TestCase(1000, 12_000, "(1d3-1)*3667+1d3667+999")]
        [TestCase(1336, 1336, "1336")]
        [TestCase(1336, 1337, "1d2+1335")]
        [TestCase(1336, 8245, "(1d10-1)*691+1d691+1335")]
        [TestCase(1336, 9266, "1d7931+1335")]
        [TestCase(1336, 90210, "(1d3-1)*29625+(1d3-1)*9875+1d9875+1335")]
        [TestCase(1337, 1337, "1337")]
        [TestCase(1337, 8245, "(1d3-1)*2303+1d2303+1336")]
        [TestCase(1337, 9266, "(1d10-1)*793+1d793+1336")]
        [TestCase(1337, 90210, "(1d2-1)*44437+4d10000+1d4441+1332")]
        [TestCase(2000, 8000, "1d6001+1999")]
        [TestCase(2000, 12_000, "1d10000+1d2+1998")]
        [TestCase(2000, 16_000, "(1d3-1)*4667+1d4667+1999")]
        [TestCase(2000, 20_000, "1d10000+1d8002+1998")]
        [TestCase(2000, 24_000, "2d10000+1d2003+1997")]
        [TestCase(3000, 12_000, "1d9001+2999")]
        [TestCase(3000, 18_000, "1d10000+1d5002+2998")]
        [TestCase(3000, 24_000, "2d10000+1d1003+2997")]
        [TestCase(3000, 30_000, "2d10000+1d7003+2997")]
        [TestCase(3000, 36_000, "3d10000+1d3004+2996")]
        [TestCase(4000, 16_000, "1d10000+1d2002+3998")]
        [TestCase(4000, 24_000, "(1d3-1)*6667+1d6667+3999")]
        [TestCase(4000, 32_000, "2d10000+1d8003+3997")]
        [TestCase(4000, 40_000, "3d10000+1d6004+3996")]
        [TestCase(4000, 48_000, "(1d3-1)*14667+(1d3-1)*4889+1d4889+3999")]
        [TestCase(5000, 20_000, "1d10000+1d5002+4998")]
        [TestCase(5000, 30_000, "2d10000+1d5003+4997")]
        [TestCase(5000, 40_000, "(1d3-1)*11667+(1d3-1)*3889+1d3889+4999")]
        [TestCase(5000, 50_000, "4d10000+1d5005+4995")]
        [TestCase(5000, 60_000, "5d10000+1d5006+4994")]
        [TestCase(6000, 24_000, "1d10000+1d8002+5998")]
        [TestCase(6000, 36_000, "3d10000+1d4+5996")]
        [TestCase(6000, 48_000, "4d10000+1d2005+5995")]
        [TestCase(6000, 60_000, "5d10000+1d4006+5994")]
        [TestCase(6000, 72_000, "6d10000+1d6007+5993")]
        [TestCase(7000, 28_000, "2d10000+1d1003+6997")]
        [TestCase(7000, 42_000, "(1d3-1)*11667+(1d3-1)*3889+1d3889+6999")]
        [TestCase(7000, 56_000, "4d10000+1d9005+6995")]
        [TestCase(7000, 70_000, "6d10000+1d3007+6993")]
        [TestCase(7000, 84_000, "(1d3-1)*25667+2d10000+1d5669+6997")]
        [TestCase(8245, 8245, "8245")]
        [TestCase(8245, 9266, "(1d2-1)*511+1d511+8244")]
        [TestCase(8245, 90210, "(1d6-1)*13661+1d10000+1d3662+8243")]
        [TestCase(9266, 9266, "9266")]
        [TestCase(9266, 90210, "8d10000+1d953+9257")]
        [TestCase(10_000, 40_000, "3d10000+1d4+9996")]
        [TestCase(10_000, 60_000, "(1d3-1)*16667+1d10000+1d6668+9998")]
        [TestCase(10_000, 80_000, "7d10000+1d8+9992")]
        [TestCase(10_000, 100_000, "9d10000+1d10+9990")]
        [TestCase(10_000, 120_000, "(1d3-1)*36667+3d10000+1d6670+9996")]
        [TestCase(20_000, 80_000, "6d10000+1d7+19993")]
        [TestCase(20_000, 120_000, "10d10000+1d11+19989")]
        [TestCase(20_000, 160_000, "(1d3-1)*46667+4d10000+1d6671+19995")]
        [TestCase(20_000, 200_000, "18d10000+1d19+19981")]
        [TestCase(20_000, 240_000, "22d10000+1d23+19977")]
        [TestCase(30_000, 120_000, "9d10000+1d10+29990")]
        [TestCase(30_000, 180_000, "15d10000+1d16+29984")]
        [TestCase(30_000, 240_000, "21d10000+1d22+29978")]
        [TestCase(30_000, 300_000, "27d10000+1d28+29972")]
        [TestCase(30_000, 360_000, "33d10000+1d34+29966")]
        [TestCase(40_000, 160_000, "12d10000+1d13+39987")]
        [TestCase(40_000, 240_000, "(1d3-1)*66667+6d10000+1d6673+39993")]
        [TestCase(40_000, 320_000, "28d10000+1d29+39971")]
        [TestCase(40_000, 400_000, "36d10000+1d37+39963")]
        [TestCase(40_000, 480_000, "(1d3-1)*146667+(1d3-1)*48889+4d10000+1d8893+39995")]
        [TestCase(50_000, 200_000, "15d10000+1d16+49984")]
        [TestCase(50_000, 300_000, "25d10000+1d26+49974")]
        [TestCase(50_000, 400_000, "(1d3-1)*116667+(1d3-1)*38889+(1d3-1)*12963+(1d3-1)*4321+1d4321+49999")]
        [TestCase(50_000, 500_000, "45d10000+1d46+49954")]
        [TestCase(50_000, 600_000, "55d10000+1d56+49944")]
        [TestCase(60_000, 240_000, "18d10000+1d19+59981")]
        [TestCase(60_000, 360_000, "30d10000+1d31+59969")]
        [TestCase(60_000, 480_000, "42d10000+1d43+59957")]
        [TestCase(60_000, 600_000, "54d10000+1d55+59945")]
        [TestCase(60_000, 720_000, "66d10000+1d67+59933")]
        [TestCase(70_000, 280_000, "21d10000+1d22+69978")]
        [TestCase(70_000, 420_000, "(1d3-1)*116667+(1d3-1)*38889+(1d3-1)*12963+(1d3-1)*4321+1d4321+69999")]
        [TestCase(70_000, 560_000, "49d10000+1d50+69950")]
        [TestCase(70_000, 700_000, "63d10000+1d64+69936")]
        [TestCase(70_000, 840_000, "(1d3-1)*256667+25d10000+1d6692+69974")]
        [TestCase(90_210, 90_210, "90210")]
        public void GetRollWithMostEvenDistribution_AllowMultipliersAndNonstandard(int lower, int upper, string expectedRoll)
        {
            stopwatch.Start();
            var roll = RollHelper.GetRollWithMostEvenDistribution(lower, upper, true, true);
            stopwatch.Stop();

            Assert.That(roll, Is.EqualTo(expectedRoll), $"[{lower},{upper}]");
            Assert.That(stopwatch.Elapsed, Is.LessThan(TimeSpan.FromSeconds(1)), $"[{lower},{upper}]");
        }

        [TestCase(1, 2, 2, "1")]
        [TestCase(5, 6, 50, "(1d3-1)*15+(1d3-1)*5+1d5")]
        [TestCase(6, 7, 9, "1d3")]
        [TestCase(6, 8, 10, "1d3+1")]
        [TestCase(6, 10, 18, "(1d3-1)*3+1d3+3")]
        [TestCase(9, 14, 27, "(1d2-1)*7+1d7+4")]
        [TestCase(9, 15, 27, "1d13+5")]
        [TestCase(12, 19, 36, "(1d6-1)*3+1d3+6")]
        [TestCase(15, 22, 45, "(1d12-1)*2+1d2+6")]
        public void GetRollWithMostEvenDistribution_WithBaseAmount_AllowMultipliersAndNonstandard(int baseAmount, int lower, int upper, string expectedRoll)
        {
            stopwatch.Start();
            var roll = RollHelper.GetRollWithMostEvenDistribution(baseAmount, lower, upper, true, true);
            stopwatch.Stop();

            Assert.That(roll, Is.EqualTo(expectedRoll), $"[{lower},{upper}]");
            Assert.That(stopwatch.Elapsed, Is.LessThan(TimeSpan.FromSeconds(1)), $"[{lower},{upper}]");
        }
    }
}
