using NUnit.Framework;

namespace DnDGen.RollGen.Tests.Integration
{
    [TestFixture]
    public class IsValidTests : IntegrationTests
    {
        private Dice dice;

        [SetUp]
        public void Setup()
        {
            dice = GetNewInstanceOf<Dice>();
        }

        [TestCase("3d6", true)]
        [TestCase("3d6+1", true)]
        [TestCase("1+3d6", true)]
        [TestCase("(3)d(6)+1", true)]
        [TestCase("(1d2)d(3d4)+5d6", true)]
        [TestCase("10000d10000", true)]
        [TestCase("100d100d100", true)]
        [TestCase("100d100d100d100", false)]
        [TestCase("(100d100)d(100d100)", true)]
        [TestCase("100d100d(100d100)", true)]
        [TestCase("(0)d(6)+1", false)]
        [TestCase("(-3)d(6)+1", false, Ignore = "This is interpreted as -1(3d6)+1, which is valid")]
        [TestCase("(3.1)d(6)+1", false)]
        [TestCase("0d6+1", false)]
        [TestCase("10001d10000", false)]
        [TestCase("100d100d2d2", false)]
        [TestCase("100d100d(2d2)", true)]
        [TestCase("(100d100+1)d(100d100)", false)]
        [TestCase("(3)d(-6)+1", false)]
        [TestCase("(3)d(6.1)+1", false)]
        [TestCase("3d0+1", false)]
        [TestCase("10000d10001", false)]
        [TestCase("(100d100)d(100d100+1)", false)]
        [TestCase("4d6k3", true)]
        [TestCase("(4)d(6)k(3)", true)]
        [TestCase("(4)d(6)k(-1)", false)]
        [TestCase("(4)d(6)k(3.1)", false)]
        [TestCase("4d6k10000", true)]
        [TestCase("4d6k10001", false)]
        [TestCase("4d6k(100d100+1)", false)]
        [TestCase("3d6t1", true)]
        [TestCase("3d6t1t2", true)]
        [TestCase("3d6t7", true)]
        [TestCase("3d6t0", false)]
        [TestCase("3d6t(-1)", false)]
        [TestCase("3d6t6:0", true)]
        [TestCase("3d6t10001", false)]
        [TestCase("3d6t6:10001", true)]
        [TestCase("3d6t6:0", true)]
        [TestCase("3d6t6:(-1)", true, Ignore = "Negative transform targets are not detected correctly")]
        [TestCase("avg(1d12, 2d6, 3d4, 4d3, 6d2)", true)]
        [TestCase("bad(1d12, 2d6, 3d4, 4d3, 6d2)", false)]
        [TestCase("this is not a roll", false)]
        [TestCase("this contains 3d6, but is not a roll", false)]
        [TestCase("9266+90210-42*600/1337%1336+96d(783d82%45+922-2022/337)-min(1d2, 3d4, 5d6)+max(1d2, 3d4, 5d6)*avg(1d2, 3d4, 5d6)", true)]
        [TestCase("9266+90210-42*600/1337%1336+96d(783d82%45+922-2022/337)-min(max(avg(1d2, 3d4, 5d6)))", false)]
        [TestCase("9266+90210-42*600/1337%1336+96d(783d82%45+922-2022/227)-min(max(avg(1d2, 3d4, 5d6)))", false)]
        [TestCase("9266+90210-42*600/1337%1336+96d(783d8245+922-2022/227)-min(max(avg(1d2, 3d4, 5d6)))", false)]
        [TestCase("4d6", true)]
        [TestCase("92d66", true)]
        [TestCase("5+3d4*2", true)]
        [TestCase("(5+3d4*2)", true)]
        [TestCase("((5+3d4*2))", true)]
        [TestCase("1d2d5k1d6", true)]
        [TestCase("((1d2)d5k1)d6", true)]
        [TestCase("3d4k2", true)]
        [TestCase("5+3d4*3", true)]
        [TestCase("1d2", true)]
        [TestCase("9266", true)]
        [TestCase("1", true)]
        [TestCase("2", true)]
        [TestCase("1d3", true)]
        [TestCase("1d4", true)]
        [TestCase("1d6", true)]
        [TestCase("1d8", true)]
        [TestCase("1d10", true)]
        [TestCase("1d12", true)]
        [TestCase("1d20", true)]
        [TestCase("1d100", true)]
        [TestCase("1d100>50", true)]
        [TestCase("1d100>90", true)]
        [TestCase("1d100>=90", true)]
        [TestCase("1d100=>90", false)]
        [TestCase("5+3d4*2>20", true)]
        [TestCase("5+3d4*2<20", true)]
        [TestCase("5+3d4*2=20", true)]
        [TestCase("2d6 >= 1d12", true)]
        [TestCase("2d6 <= 1d12", true)]
        [TestCase("2d6 = 1d12", true)]
        [TestCase("2d6 => 1d12", false)]
        [TestCase("2d6 =< 1d12", false)]
        [TestCase("This contains a roll of 4d6k3 for rolling stats", false)]
        [TestCase("min(4d6,10) + 0.5", true)]
        [TestCase("Fireball does {min(4d6,10) + 0.5} damage", false)]
        [TestCase("max(4d6,10) + 0.5", true)]
        [TestCase("Fireball does {max(4d6,10) + 0.5} damage", false)]
        [TestCase("1d6+3", true)]
        [TestCase("1d8+1d2-1", true)]
        [TestCase("4d3-3", true)]
        [TestCase("4d6!", true)]
        [TestCase("3d4!", true)]
        [TestCase("3d4!k2", true)]
        [TestCase("3d4!e3", true)]
        [TestCase("3d4e1e2k2", true)]
        [TestCase("3d6t1t5", true)]
        [TestCase("3d6!t1k2", true)]
        [TestCase("3d6t1:2", true)]
        [TestCase("4d3!t2k1", true)]
        [TestCase("4d3!k1t2", true)]
        [TestCase("4d3t2!k1", true)]
        [TestCase("4d3t2k1!", true)]
        [TestCase("4d3k1!t2", true)]
        [TestCase("4d3k1t2!", true)]
        public void IsValid(string rollExpression, bool expected)
        {
            var actual = dice.IsValid(rollExpression);
            Assert.That(actual, Is.EqualTo(expected));
        }
    }
}
